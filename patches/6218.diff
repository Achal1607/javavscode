diff --git a/java/java.hints/src/org/netbeans/modules/java/hints/infrastructure/JavaErrorProvider.java b/java/java.hints/src/org/netbeans/modules/java/hints/infrastructure/JavaErrorProvider.java
index 9e5c5e69c40c..a756a2e9bd72 100644
--- a/java/java.hints/src/org/netbeans/modules/java/hints/infrastructure/JavaErrorProvider.java
+++ b/java/java.hints/src/org/netbeans/modules/java/hints/infrastructure/JavaErrorProvider.java
@@ -194,14 +194,14 @@ private static List<CodeAction> convertFixes(ErrorDescription err, Consumer<Exce
         for (Fix f : fixes) {
             if (f instanceof IncompleteClassPath.ResolveFix) {
                 // We know that this is a project problem and that the problems reported by ProjectProblemsProvider should be resolved
-                CodeAction action = new CodeAction(f.getText(), new Command(f.getText(), "java.project.resolveProjectProblems"));
+                CodeAction action = new CodeAction(f.getText(), new Command(f.getText(), "nbls.java.project.resolveProjectProblems"));
                 result.add(action);
             }
             if (f instanceof org.netbeans.modules.java.hints.errors.EnablePreview.ResolveFix) {
                 org.netbeans.modules.java.hints.errors.EnablePreview.ResolveFix rf = (org.netbeans.modules.java.hints.errors.EnablePreview.ResolveFix) f;
                 List<Object> params = rf.getNewSourceLevel() != null ? Arrays.asList(rf.getNewSourceLevel())
                                                                      : Collections.emptyList();
-                CodeAction action = new CodeAction(f.getText(), new Command(f.getText(), "java.project.enable.preview", params));
+                CodeAction action = new CodeAction(f.getText(), new Command(f.getText(), "nbls.java.project.enable.preview", params));
                 result.add(action);
             }
             if (f instanceof ImportClass.FixImport) {
diff --git a/java/java.lsp.server/nbcode/integration/src/org/netbeans/modules/nbcode/integration/commands/ProjectAuditCommand.java b/java/java.lsp.server/nbcode/integration/src/org/netbeans/modules/nbcode/integration/commands/ProjectAuditCommand.java
index 0c9da35497d6..05e8f12cfc1b 100644
--- a/java/java.lsp.server/nbcode/integration/src/org/netbeans/modules/nbcode/integration/commands/ProjectAuditCommand.java
+++ b/java/java.lsp.server/nbcode/integration/src/org/netbeans/modules/nbcode/integration/commands/ProjectAuditCommand.java
@@ -87,7 +87,7 @@ public class ProjectAuditCommand extends CodeActionsProvider {
     ));
     
     @Override
-    public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+    public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
         return Collections.emptyList();
     }
     
diff --git a/java/java.lsp.server/nbcode/integration/src/org/netbeans/modules/nbcode/integration/commands/ProjectMetadataCommand.java b/java/java.lsp.server/nbcode/integration/src/org/netbeans/modules/nbcode/integration/commands/ProjectMetadataCommand.java
index f83c433bc8e4..30e0142b2db1 100644
--- a/java/java.lsp.server/nbcode/integration/src/org/netbeans/modules/nbcode/integration/commands/ProjectMetadataCommand.java
+++ b/java/java.lsp.server/nbcode/integration/src/org/netbeans/modules/nbcode/integration/commands/ProjectMetadataCommand.java
@@ -74,7 +74,7 @@ public ProjectMetadataCommand() {
     }
     
     @Override
-    public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+    public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
         return Collections.emptyList();
     }
 
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java
index d913aab26e31..74321bec9224 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/Utils.java
@@ -26,11 +26,13 @@
 import java.io.StringWriter;
 import java.net.MalformedURLException;
 import java.net.URI;
+import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
 import java.util.Set;
+import java.util.stream.Collectors;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ElementKind;
 import javax.lang.model.element.ExecutableElement;
@@ -50,6 +52,7 @@
 import org.netbeans.api.java.source.CompilationInfo;
 import org.netbeans.api.lsp.StructureElement;
 import org.netbeans.modules.editor.java.Utilities;
+import org.netbeans.modules.java.lsp.server.protocol.NbCodeClientCapabilities;
 import org.netbeans.modules.parsing.spi.indexing.support.QuerySupport;
 import org.netbeans.spi.jumpto.type.SearchType;
 import org.openide.cookies.EditorCookie;
@@ -64,6 +67,8 @@
  */
 public class Utils {
 
+    public static final String DEFAULT_COMMAND_PREFIX = "nbls";
+
     public static SymbolKind structureElementKind2SymbolKind (StructureElement.Kind kind) {
         switch (kind) {
             case Array : return SymbolKind.Array;
@@ -488,4 +493,39 @@ public static String html2plain(String s, boolean collapseWhitespaces) {
     public static String html2plain(String s) {
         return html2plain(s, false);
     }
+
+    public static String encodeCommand(String cmd, NbCodeClientCapabilities capa) {
+        String prefix = capa != null ? capa.getCommandPrefix()
+                                     : DEFAULT_COMMAND_PREFIX;
+
+        if (cmd.startsWith(DEFAULT_COMMAND_PREFIX) &&
+            !DEFAULT_COMMAND_PREFIX.equals(prefix)) {
+            return prefix + cmd.substring(DEFAULT_COMMAND_PREFIX.length());
+        } else {
+            return cmd;
+        }
+    }
+
+    public static String decodeCommand(String cmd, NbCodeClientCapabilities capa) {
+        String prefix = capa != null ? capa.getCommandPrefix()
+                                     : DEFAULT_COMMAND_PREFIX;
+
+        if (cmd.startsWith(prefix) &&
+            !DEFAULT_COMMAND_PREFIX.equals(prefix)) {
+            return DEFAULT_COMMAND_PREFIX + cmd.substring(prefix.length());
+        } else {
+            return cmd;
+        }
+    }
+
+    public static void ensureCommandsPrefixed(Collection<String> commands) {
+        Set<String> wrongCommands = commands.stream()
+                                            .filter(cmd -> !cmd.startsWith(DEFAULT_COMMAND_PREFIX))
+                                            .filter(cmd -> !cmd.startsWith("test."))
+                                            .collect(Collectors.toSet());
+
+        if (!wrongCommands.isEmpty()) {
+            throw new IllegalStateException("Some commands are not properly prefixed: " + wrongCommands);
+        }
+    }
 }
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/db/DBAddConnection.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/db/DBAddConnection.java
index 5b00a58bec9c..557edb649cc2 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/db/DBAddConnection.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/db/DBAddConnection.java
@@ -75,7 +75,7 @@
 })
 @ServiceProvider(service = CodeActionsProvider.class)
 public class DBAddConnection extends CodeActionsProvider {
-    public static final String DB_ADD_CONNECTION =  "db.add.connection"; // NOI18N
+    public static final String DB_ADD_CONNECTION =  "nbls.db.add.connection"; // NOI18N
     public static final String USER_ID =  "userId"; // NOI18N
     public static final String PASSWORD =  "password"; // NOI18N
     public static final String DRIVER =  "driver"; // NOI18N
@@ -306,7 +306,7 @@ public Set<String> getCommands() {
     }
 
     @Override
-    public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+    public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
         return Collections.emptyList();
     }
     
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/db/DBCommandProvider.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/db/DBCommandProvider.java
index 79850e77fbca..1925d3837655 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/db/DBCommandProvider.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/db/DBCommandProvider.java
@@ -41,10 +41,10 @@
  */
 @ServiceProvider(service = CodeActionsProvider.class)
 public class DBCommandProvider extends CodeActionsProvider {
-    private static final String  COMMAND_GET_PREFERRED_CONNECTION = "java.db.preferred.connection";
+    private static final String  COMMAND_GET_PREFERRED_CONNECTION = "nbls.db.preferred.connection";
     
     @Override
-    public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+    public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
         return Collections.emptyList();
     }
 
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/db/DBConnectionProvider.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/db/DBConnectionProvider.java
index 8c01aedfb36a..239890a9e8da 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/db/DBConnectionProvider.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/db/DBConnectionProvider.java
@@ -62,8 +62,8 @@
  */
 @ServiceProvider(service = CodeActionsProvider.class)
 public class DBConnectionProvider extends CodeActionsProvider{
-   private static final Logger LOG = Logger.getLogger(DBConnectionProvider.class.getName());
-   private static final String  GET_DB_CONNECTION = "java.db.connection"; //NOI18N
+    private static final Logger LOG = Logger.getLogger(DBConnectionProvider.class.getName());
+    private static final String  GET_DB_CONNECTION = "nbls.db.connection"; //NOI18N
 
     private static final boolean POSIX = FileSystems.getDefault().supportedFileAttributeViews().contains("posix");  // NOI18N
     private static final EnumSet<PosixFilePermission> readWritePosix = EnumSet.of(OWNER_READ, OWNER_WRITE);
@@ -81,7 +81,7 @@ public DBConnectionProvider() {
     }
 
     @Override
-    public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+    public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
         return Collections.emptyList();
     }
 
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/debugging/attach/AttachConfigurationCompletion.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/debugging/attach/AttachConfigurationCompletion.java
index 5ff3e14209bc..dcdfca095d7e 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/debugging/attach/AttachConfigurationCompletion.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/debugging/attach/AttachConfigurationCompletion.java
@@ -35,6 +35,7 @@
 import org.netbeans.api.project.Project;
 import org.netbeans.modules.java.lsp.server.Utils;
 import org.netbeans.modules.java.lsp.server.protocol.LaunchConfigurationCompletion;
+import org.netbeans.modules.java.lsp.server.protocol.NbCodeClientCapabilities;
 import org.openide.util.Exceptions;
 import org.openide.util.lookup.ServiceProvider;
 
@@ -43,20 +44,25 @@
  *
  * @author Martin Entlicher
  */
-@ServiceProvider(service = LaunchConfigurationCompletion.class, position = 200)
 public class AttachConfigurationCompletion implements LaunchConfigurationCompletion {
 
+    private final NbCodeClientCapabilities capa;
+
+    public AttachConfigurationCompletion(NbCodeClientCapabilities capa) {
+        this.capa = capa;
+    }
+
     @Override
     public CompletableFuture<List<CompletionItem>> configurations(Supplier<CompletableFuture<Project>> projectSupplier) {
         return CompletableFuture.supplyAsync(() -> {
-            return createCompletion(AttachConfigurations.get());
+            return createCompletion(AttachConfigurations.get(capa));
         }, AttachConfigurations.RP);
     }
 
     @Override
     public CompletableFuture<List<CompletionItem>> attributes(Supplier<CompletableFuture<Project>> projectSupplier, Map<String, Object> currentAttributes) {
         return CompletableFuture.supplyAsync(() -> {
-            return createAttributesCompletion(AttachConfigurations.get(), currentAttributes);
+            return createAttributesCompletion(AttachConfigurations.get(capa), currentAttributes);
         }, AttachConfigurations.RP);
     }
 
@@ -140,4 +146,13 @@ private static List<CompletionItem> createAttributesCompletion(AttachConfigurati
         }
     }
 
+    @ServiceProvider(service = Factory.class, position = 200)
+    public static final class FactoryImpl implements Factory {
+
+        @Override
+        public LaunchConfigurationCompletion createLaunchConfigurationCompletion(NbCodeClientCapabilities capa) {
+            return new AttachConfigurationCompletion(capa);
+        }
+
+    }
 }
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/debugging/attach/AttachConfigurations.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/debugging/attach/AttachConfigurations.java
index 7989a0598b4b..87ec97a64b9d 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/debugging/attach/AttachConfigurations.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/debugging/attach/AttachConfigurations.java
@@ -44,6 +44,7 @@
 import org.netbeans.modules.java.lsp.server.protocol.NbCodeLanguageClient;
 import org.netbeans.modules.java.lsp.server.input.QuickPickItem;
 import org.netbeans.modules.java.lsp.server.input.ShowQuickPickParams;
+import org.netbeans.modules.java.lsp.server.protocol.NbCodeClientCapabilities;
 import org.openide.util.NbBundle.Messages;
 import org.openide.util.RequestProcessor;
 
@@ -61,26 +62,26 @@ public final class AttachConfigurations {
 
     private final List<ConfigurationAttributes> configurations;
 
-    private AttachConfigurations(List<Connector> attachingConnectors) {
+    private AttachConfigurations(NbCodeClientCapabilities capa, List<Connector> attachingConnectors) {
         List<ConfigurationAttributes> configs = new ArrayList<>(5);
         for (Connector ac : attachingConnectors) {
-            configs.add(new ConfigurationAttributes(ac));
+            configs.add(new ConfigurationAttributes(capa, ac));
         }
         this.configurations = Collections.unmodifiableList(configs);
     }
 
-    public static AttachConfigurations get() {
+    public static AttachConfigurations get(NbCodeClientCapabilities capa) {
         List<AttachingConnector> attachingConnectors = Bootstrap.virtualMachineManager().attachingConnectors();
         List<ListeningConnector> listeningConnectors = Bootstrap.virtualMachineManager().listeningConnectors();
         List<Connector> connectors = new ArrayList<>(attachingConnectors.size() + listeningConnectors.size());
         connectors.addAll(attachingConnectors);
         connectors.addAll(listeningConnectors);
-        return new AttachConfigurations(connectors);
+        return new AttachConfigurations(capa, connectors);
     }
 
-    public static CompletableFuture<Object> findConnectors() {
+    public static CompletableFuture<Object> findConnectors(NbCodeClientCapabilities capa) {
         return CompletableFuture.supplyAsync(() -> {
-            return get().listAttachingConnectors();
+            return get(capa).listAttachingConnectors();
         }, RP);
     }
 
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/debugging/attach/ConfigurationAttributes.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/debugging/attach/ConfigurationAttributes.java
index 58ba4f9d216f..50f0dbbd807b 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/debugging/attach/ConfigurationAttributes.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/debugging/attach/ConfigurationAttributes.java
@@ -25,6 +25,8 @@
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Set;
+import org.netbeans.modules.java.lsp.server.Utils;
+import org.netbeans.modules.java.lsp.server.protocol.NbCodeClientCapabilities;
 
 import org.netbeans.modules.java.lsp.server.protocol.Server;
 import org.openide.util.NbBundle;
@@ -63,7 +65,7 @@ final class ConfigurationAttributes {
                         "DESC_HostName=Name or IP address of the host machine to connect to",
                         "DESC_Port=Port number to connect to",
                         "DESC_ShMem=Shared memory transport address at which the target VM is listening"})
-    ConfigurationAttributes(Connector ac) {
+    ConfigurationAttributes(NbCodeClientCapabilities capa, Connector ac) {
         this.ac = ac;
         String connectorName = ac.name();
         this.id = connectorName;
@@ -72,7 +74,7 @@ final class ConfigurationAttributes {
         switch (connectorName) {
             case CONNECTOR_PROCESS:
                 this.name = Bundle.LBL_AttachToProcess();
-                attributes.put(PROCESS_ARG_PID, new ConfigurationAttribute("${command:" + Server.JAVA_FIND_DEBUG_PROCESS_TO_ATTACH + "}", "", true)); // NOI18N
+                attributes.put(PROCESS_ARG_PID, new ConfigurationAttribute("${command:" + Utils.encodeCommand(Server.JAVA_FIND_DEBUG_PROCESS_TO_ATTACH, capa) + "}", "", true)); // NOI18N
                 break;
             case CONNECTOR_SOCKET:
                 this.name = Bundle.LBL_AttachToPort();
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/debugging/attach/NbAttachRequestHandler.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/debugging/attach/NbAttachRequestHandler.java
index 9563381f2669..1b483fed54f5 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/debugging/attach/NbAttachRequestHandler.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/debugging/attach/NbAttachRequestHandler.java
@@ -51,6 +51,7 @@
 import org.netbeans.modules.java.lsp.server.debugging.launch.NbDebugSession;
 import org.netbeans.modules.java.lsp.server.debugging.ni.NILocationVisualizer;
 import org.netbeans.modules.java.lsp.server.debugging.utils.ErrorUtilities;
+import org.netbeans.modules.java.lsp.server.protocol.NbCodeClientCapabilities;
 import org.netbeans.modules.java.lsp.server.protocol.NbCodeLanguageClient;
 import org.netbeans.modules.java.nativeimage.debugger.api.NIDebugRunner;
 import org.netbeans.modules.nativeimage.api.debug.NIDebugger;
@@ -163,7 +164,9 @@ private void attachNativeDebug(File nativeImageFile, long processId, String miDe
     @Messages({"# {0} - connector name", "MSG_InvalidConnector=Invalid connector name: {0}"})
     private CompletableFuture<Void> attachToJVM(Map<String, Object> attachArguments, DebugAdapterContext context) {
         CompletableFuture<Void> resultFuture = new CompletableFuture<>();
-        ConfigurationAttributes configurationAttributes = AttachConfigurations.get().findConfiguration(attachArguments);
+        NbCodeLanguageClient client = context.getLspSession().getLookup().lookup(NbCodeLanguageClient.class);
+        NbCodeClientCapabilities clientCapa = client != null ? client.getNbCodeCapabilities() : null;
+        ConfigurationAttributes configurationAttributes = AttachConfigurations.get(clientCapa).findConfiguration(attachArguments);
         if (configurationAttributes != null) {
             Connector connector = configurationAttributes.getConnector();
             RP.post(() -> attachTo(connector, attachArguments, context, resultFuture));
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/explorer/NodeActionsProvider.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/explorer/NodeActionsProvider.java
index a78663856191..8c41ef1211d3 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/explorer/NodeActionsProvider.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/explorer/NodeActionsProvider.java
@@ -90,7 +90,7 @@ public static NodeActionsProvider forFile(FileObject f) {
     }
 
     @Override
-    public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+    public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
         return Collections.emptyList();
     }
     
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/explorer/NodePropertiesProvider.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/explorer/NodePropertiesProvider.java
index 2d74a57288b8..f20e40acc987 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/explorer/NodePropertiesProvider.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/explorer/NodePropertiesProvider.java
@@ -52,7 +52,7 @@
 public class NodePropertiesProvider extends CodeActionsProvider {
     private static final Logger LOG = Logger.getLogger(NodePropertiesProvider.class.getName());
 
-    private static final String COMMAND_PREFIX = "java.";
+    private static final String COMMAND_PREFIX = "nbls.";
     private static final String COMMAND_GET_NODE_PROPERTIES = COMMAND_PREFIX + "node.properties.get";      // NOI18N
     private static final String COMMAND_SET_NODE_PROPERTIES = COMMAND_PREFIX + "node.properties.set";      // NOI18N
 
@@ -76,7 +76,7 @@ public class NodePropertiesProvider extends CodeActionsProvider {
     private final Gson gson = new Gson();
 
     @Override
-    public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+    public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
         return Collections.emptyList();
     }
 
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/htmlui/WebView.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/htmlui/WebView.java
index 2e7918b2c601..7b91b8974527 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/htmlui/WebView.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/htmlui/WebView.java
@@ -369,7 +369,7 @@ private static Level findLevel(int priority) {
     public static final class Server extends CodeActionsProvider {
 
         private static final Map<String, WebView.Command> SESSIONS = new HashMap<>();
-        private static final String PROCESS_COMMAND = "nb.htmlui.process.command"; // NOI18N
+        private static final String PROCESS_COMMAND = "nbls.htmlui.process.command"; // NOI18N
         private static final String ID = "id"; // NOI18N
         private final Gson gson = new Gson();
 
@@ -394,7 +394,7 @@ public CompletableFuture<Object> processCommand(NbCodeLanguageClient client, Str
         }
 
         @Override
-        public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+        public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
             return Collections.emptyList();
         }
     } // end of Server
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/CodeActionsProvider.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/CodeActionsProvider.java
index c73402c00163..f9a1378e348f 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/CodeActionsProvider.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/CodeActionsProvider.java
@@ -54,7 +54,7 @@ public abstract class CodeActionsProvider {
     public static final String DATA = "data";
     protected static final String ERROR = "<error>"; //NOI18N
 
-    public abstract List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception;
+    public abstract List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception;
 
     public CompletableFuture<CodeAction> resolve(NbCodeLanguageClient client, CodeAction codeAction, Object data) {
         return CompletableFuture.completedFuture(codeAction);
@@ -68,11 +68,11 @@ public CompletableFuture<Object> processCommand(NbCodeLanguageClient client, Str
         return CompletableFuture.completedFuture(false);
     }
 
-    protected CodeAction createCodeAction(String name, String kind, Object data, String command, Object... commandArgs) {
+    protected CodeAction createCodeAction(NbCodeLanguageClient client, String name, String kind, Object data, String command, Object... commandArgs) {
         CodeAction action = new CodeAction(name);
         action.setKind(kind);
         if (command != null) {
-            action.setCommand(new Command(name, command, Arrays.asList(commandArgs)));
+            action.setCommand(new Command(name, Utils.encodeCommand(command, client.getNbCodeCapabilities()), Arrays.asList(commandArgs)));
         }
         if (data != null) {
             Map<String, Object> map = new HashMap<>();
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/ConstructorGenerator.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/ConstructorGenerator.java
index 2db3dac82721..e2e048db5bbf 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/ConstructorGenerator.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/ConstructorGenerator.java
@@ -91,7 +91,7 @@ public ConstructorGenerator() {
     @NbBundle.Messages({
         "DN_GenerateConstructor=Generate Constructor...",
     })
-    public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+    public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
         CompilationController info = CompilationController.get(resultIterator.getParserResult());
         if (info == null) {
             return Collections.emptyList();
@@ -187,7 +187,7 @@ public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeAction
         data.put(OFFSET, startOffset);
         data.put(CONSTRUCTORS, constructors);
         data.put(FIELDS, fields);
-        return Collections.singletonList(createCodeAction(Bundle.DN_GenerateConstructor(), isSource ? CODE_GENERATOR_KIND : CodeActionKind.QuickFix, data, "workbench.action.focusActiveEditorGroup"));
+        return Collections.singletonList(createCodeAction(client, Bundle.DN_GenerateConstructor(), isSource ? CODE_GENERATOR_KIND : CodeActionKind.QuickFix, data, "workbench.action.focusActiveEditorGroup"));
     }
 
     @Override
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/DelegateMethodGenerator.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/DelegateMethodGenerator.java
index 5004e793ee62..8c317e294659 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/DelegateMethodGenerator.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/DelegateMethodGenerator.java
@@ -85,7 +85,7 @@ public final class DelegateMethodGenerator extends CodeActionsProvider {
     @NbBundle.Messages({
         "DN_GenerateDelegateMethod=Generate Delegate Method...",
     })
-    public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+    public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
         List<String> only = params.getContext().getOnly();
         if (only == null || !only.contains(CodeActionKind.Source)) {
             return Collections.emptyList();
@@ -135,7 +135,7 @@ public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeAction
         data.put(OFFSET, offset);
         data.put(TYPE, typeItem);
         data.put(FIELDS, fields);
-        return Collections.singletonList(createCodeAction(Bundle.DN_GenerateDelegateMethod(), CODE_GENERATOR_KIND, data, "workbench.action.focusActiveEditorGroup"));
+        return Collections.singletonList(createCodeAction(client, Bundle.DN_GenerateDelegateMethod(), CODE_GENERATOR_KIND, data, "workbench.action.focusActiveEditorGroup"));
     }
 
     @Override
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/EqualsHashCodeGenerator.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/EqualsHashCodeGenerator.java
index 8f4968a8d494..740a9d38ff12 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/EqualsHashCodeGenerator.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/EqualsHashCodeGenerator.java
@@ -75,7 +75,7 @@ public final class EqualsHashCodeGenerator extends CodeActionsProvider {
         "DN_GenerateHashCode=Generate hashCode()...",
         "DN_GenerateEqualsHashCode=Generate equals() and hashCode()...",
     })
-    public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+    public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
         List<String> only = params.getContext().getOnly();
         if (only == null || !only.contains(CodeActionKind.Source)) {
             return Collections.emptyList();
@@ -113,11 +113,11 @@ public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeAction
         String uri = Utils.toUri(info.getFileObject());
         if (equalsHashCode[0] == null) {
             if (equalsHashCode[1] == null) {
-                return Collections.singletonList(createCodeAction(Bundle.DN_GenerateEqualsHashCode(), CODE_GENERATOR_KIND, data(0, uri, offset, fields), "workbench.action.focusActiveEditorGroup"));
+                return Collections.singletonList(createCodeAction(client, Bundle.DN_GenerateEqualsHashCode(), CODE_GENERATOR_KIND, data(0, uri, offset, fields), "workbench.action.focusActiveEditorGroup"));
             }
-            return Collections.singletonList(createCodeAction(Bundle.DN_GenerateEquals(), CODE_GENERATOR_KIND, data(EQUALS_ONLY, uri, offset, fields), "workbench.action.focusActiveEditorGroup"));
+            return Collections.singletonList(createCodeAction(client, Bundle.DN_GenerateEquals(), CODE_GENERATOR_KIND, data(EQUALS_ONLY, uri, offset, fields), "workbench.action.focusActiveEditorGroup"));
         }
-        return Collections.singletonList(createCodeAction(Bundle.DN_GenerateHashCode(), CODE_GENERATOR_KIND, data(HASH_CODE_ONLY, uri, offset, fields), "workbench.action.focusActiveEditorGroup"));
+        return Collections.singletonList(createCodeAction(client, Bundle.DN_GenerateHashCode(), CODE_GENERATOR_KIND, data(HASH_CODE_ONLY, uri, offset, fields), "workbench.action.focusActiveEditorGroup"));
     }
 
     @Override
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/GetterSetterGenerator.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/GetterSetterGenerator.java
index 1dbd16a6db76..6ce38a85522d 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/GetterSetterGenerator.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/GetterSetterGenerator.java
@@ -86,7 +86,7 @@ public final class GetterSetterGenerator extends CodeActionsProvider {
         "DN_GenerateSetterFor=Generate Setter for \"{0}\"",
         "DN_GenerateGetterSetterFor=Generate Getter and Setter for \"{0}\"",
     })
-    public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+    public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
         CompilationController info = CompilationController.get(resultIterator.getParserResult());
         if (info == null) {
             return Collections.emptyList();
@@ -102,7 +102,7 @@ public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeAction
         List<CodeAction> result = new ArrayList<>();
         if (missingGetters) {
             String name = pair.first().size() == 1 ? Bundle.DN_GenerateGetterFor(pair.first().iterator().next().getSimpleName().toString()) : Bundle.DN_GenerateGetters();
-            result.add(createCodeAction(name, all ? CODE_GENERATOR_KIND : CodeActionKind.QuickFix, data(GeneratorUtils.GETTERS_ONLY, uri, offset, all, pair.first().stream().map(variableElement -> {
+            result.add(createCodeAction(client, name, all ? CODE_GENERATOR_KIND : CodeActionKind.QuickFix, data(GeneratorUtils.GETTERS_ONLY, uri, offset, all, pair.first().stream().map(variableElement -> {
                 QuickPickItem item = new QuickPickItem(createLabel(info, variableElement));
                 item.setUserData(new ElementData(variableElement));
                 return item;
@@ -110,7 +110,7 @@ public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeAction
         }
         if (missingSetters) {
             String name = pair.second().size() == 1 ? Bundle.DN_GenerateSetterFor(pair.second().iterator().next().getSimpleName().toString()) : Bundle.DN_GenerateSetters();
-            result.add(createCodeAction(name, all ? CODE_GENERATOR_KIND : CodeActionKind.QuickFix, data(GeneratorUtils.SETTERS_ONLY, uri, offset, all, pair.second().stream().map(variableElement -> {
+            result.add(createCodeAction(client, name, all ? CODE_GENERATOR_KIND : CodeActionKind.QuickFix, data(GeneratorUtils.SETTERS_ONLY, uri, offset, all, pair.second().stream().map(variableElement -> {
                 QuickPickItem item = new QuickPickItem(createLabel(info, variableElement));
                 item.setUserData(new ElementData(variableElement));
                 return item;
@@ -119,7 +119,7 @@ public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeAction
         if (missingGetters && missingSetters) {
             pair.first().retainAll(pair.second());
             String name = pair.first().size() == 1 ? Bundle.DN_GenerateGetterSetterFor(pair.first().iterator().next().getSimpleName().toString()) : Bundle.DN_GenerateGettersSetters();
-            result.add(createCodeAction(name, all ? CODE_GENERATOR_KIND : CodeActionKind.QuickFix, data(0, uri, offset, all, pair.first().stream().map(variableElement -> {
+            result.add(createCodeAction(client, name, all ? CODE_GENERATOR_KIND : CodeActionKind.QuickFix, data(0, uri, offset, all, pair.first().stream().map(variableElement -> {
                 QuickPickItem item = new QuickPickItem(createLabel(info, variableElement));
                 item.setUserData(new ElementData(variableElement));
                 return item;
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/ImplementAllAbstractMethodsAction.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/ImplementAllAbstractMethodsAction.java
index e611c23d81ff..cfb5175723e4 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/ImplementAllAbstractMethodsAction.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/ImplementAllAbstractMethodsAction.java
@@ -47,11 +47,11 @@
 @ServiceProvider(service = CodeActionsProvider.class, position = 200)
 public final class ImplementAllAbstractMethodsAction extends CodeActionsProvider {
 
-    private static final String IMPLEMENT_ALL_ABSTRACT_METHODS = "java.implement.all.abstract.methods"; //NOI18N
+    private static final String IMPLEMENT_ALL_ABSTRACT_METHODS = "nbls.java.implement.all.abstract.methods"; //NOI18N
     private final Gson gson = new Gson();
 
     @Override
-    public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+    public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
         return Collections.emptyList();
     }
 
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/ImplementOverrideMethodGenerator.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/ImplementOverrideMethodGenerator.java
index ef04a84e85a7..ba3d34c28692 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/ImplementOverrideMethodGenerator.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/ImplementOverrideMethodGenerator.java
@@ -75,7 +75,7 @@ public final class ImplementOverrideMethodGenerator extends CodeActionsProvider
         "DN_GenerateOverrideMethod=Generate Override Method...",
         "DN_From=(from {0})",
     })
-    public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+    public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
         List<String> only = params.getContext().getOnly();
         if (only == null || !only.contains(CodeActionKind.Source)) {
             return Collections.emptyList();
@@ -107,7 +107,7 @@ public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeAction
                 implementMethods.add(new QuickPickItem(createLabel(info, method), enclosingTypeName, null, mustImplement, new ElementData(method)));
             }
             if (!implementMethods.isEmpty()) {
-                result.add(createCodeAction(Bundle.DN_GenerateImplementMethod(), CODE_GENERATOR_KIND, data(uri, offset, true, implementMethods), "workbench.action.focusActiveEditorGroup"));
+                result.add(createCodeAction(client, Bundle.DN_GenerateImplementMethod(), CODE_GENERATOR_KIND, data(uri, offset, true, implementMethods), "workbench.action.focusActiveEditorGroup"));
             }
         }
         if (typeElement.getKind().isClass() || typeElement.getKind().isInterface()) {
@@ -123,7 +123,7 @@ public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeAction
                 overrideMethods.add(item);
             }
             if (!overrideMethods.isEmpty()) {
-                result.add(createCodeAction(Bundle.DN_GenerateOverrideMethod(), CODE_GENERATOR_KIND, data (uri, offset, false, overrideMethods), "workbench.action.focusActiveEditorGroup"));
+                result.add(createCodeAction(client, Bundle.DN_GenerateOverrideMethod(), CODE_GENERATOR_KIND, data (uri, offset, false, overrideMethods), "workbench.action.focusActiveEditorGroup"));
             }
         }
         return result;
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/LaunchConfigurationCompletion.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/LaunchConfigurationCompletion.java
index 40ec50f9b495..ac5150b93ace 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/LaunchConfigurationCompletion.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/LaunchConfigurationCompletion.java
@@ -65,4 +65,8 @@ public interface LaunchConfigurationCompletion {
      */
     @NonNull
     CompletableFuture<List<CompletionItem>> attributeValues(Supplier<CompletableFuture<Project>> projectSupplier, Map<String, Object> attributes, String attributeName);
+
+    public interface Factory {
+        public LaunchConfigurationCompletion createLaunchConfigurationCompletion(NbCodeClientCapabilities capa);
+    }
 }
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/LoggerGenerator.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/LoggerGenerator.java
index 83b130c3e9e9..452577e940ab 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/LoggerGenerator.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/LoggerGenerator.java
@@ -75,7 +75,7 @@ public LoggerGenerator() {
     @NbBundle.Messages({
         "DN_GenerateLogger=Generate Logger...",
     })
-    public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+    public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
         List<String> only = params.getContext().getOnly();
         if (only == null || !only.contains(CodeActionKind.Source)) {
             return Collections.emptyList();
@@ -106,7 +106,7 @@ public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeAction
         Map<String, Object> data = new HashMap<>();
         data.put(URI, uri);
         data.put(OFFSET, offset);
-        return Collections.singletonList(createCodeAction(Bundle.DN_GenerateLogger(), CODE_GENERATOR_KIND, data, "workbench.action.focusActiveEditorGroup"));
+        return Collections.singletonList(createCodeAction(client, Bundle.DN_GenerateLogger(), CODE_GENERATOR_KIND, data, "workbench.action.focusActiveEditorGroup"));
     }
 
     @Override
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/NbCodeClientCapabilities.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/NbCodeClientCapabilities.java
index 1e869eec3847..9134992f5f38 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/NbCodeClientCapabilities.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/NbCodeClientCapabilities.java
@@ -22,6 +22,7 @@
 import com.google.gson.JsonElement;
 import org.eclipse.lsp4j.ClientCapabilities;
 import org.eclipse.lsp4j.InitializeParams;
+import org.netbeans.modules.java.lsp.server.Utils;
 
 /**
  * Encapsulates all nbcode-specific client capabilities. Need to be passed in
@@ -75,6 +76,21 @@ public final class NbCodeClientCapabilities {
      */
     private Boolean wantsGroovySupport = Boolean.TRUE;
 
+    /**
+     * Common prefix for all commands.
+     */
+    private String commandPrefix = Utils.DEFAULT_COMMAND_PREFIX;
+
+    /**
+     * Common prefix for configuration.
+     */
+    private String configurationPrefix = "netbeans.";
+
+    /**
+     * Secondary prefix for configuration.
+     */
+    private String altConfigurationPrefix = "java+.";
+
     public ClientCapabilities getClientCapabilities() {
         return clientCaps;
     }
@@ -139,6 +155,30 @@ public boolean wantsGroovySupport() {
         return wantsGroovySupport.booleanValue();
     }
 
+    public String getCommandPrefix() {
+        return commandPrefix;
+    }
+
+    public void setCommandPrefix(String commandPrefix) {
+        this.commandPrefix = commandPrefix;
+    }
+
+    public String getConfigurationPrefix() {
+        return configurationPrefix;
+    }
+
+    public void setConfigurationPrefix(String configurationPrefix) {
+        this.configurationPrefix = configurationPrefix;
+    }
+
+    public String getAltConfigurationPrefix() {
+        return altConfigurationPrefix;
+    }
+
+    public void setAltConfigurationPrefix(String altConfigurationPrefix) {
+        this.altConfigurationPrefix = altConfigurationPrefix;
+    }
+
     private NbCodeClientCapabilities withCapabilities(ClientCapabilities caps) {
         if (caps == null) {
             caps = new ClientCapabilities();
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/OrganizeImportsCodeAction.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/OrganizeImportsCodeAction.java
index c16187c700a2..4530e9ab230c 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/OrganizeImportsCodeAction.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/OrganizeImportsCodeAction.java
@@ -48,7 +48,7 @@ public final class OrganizeImportsCodeAction extends CodeActionsProvider {
     @NbBundle.Messages({
         "DN_OrganizeImports=Organize Imports",
     })
-    public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+    public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
         List<String> only = params.getContext().getOnly();
         if (only == null || !only.contains(CodeActionKind.Source) && !only.contains(CodeActionKind.SourceOrganizeImports)) {
             return Collections.emptyList();
@@ -58,7 +58,7 @@ public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeAction
             return Collections.emptyList();
         }
         String uri = Utils.toUri(info.getFileObject());
-        return Collections.singletonList(createCodeAction(Bundle.DN_OrganizeImports(), CodeActionKind.SourceOrganizeImports, uri, null));
+        return Collections.singletonList(createCodeAction(client, Bundle.DN_OrganizeImports(), CodeActionKind.SourceOrganizeImports, uri, null));
     }
 
     @Override
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/ProjectConfigurationCompletion.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/ProjectConfigurationCompletion.java
index 4a3e4098ab4b..91bf8e30dbe0 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/ProjectConfigurationCompletion.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/ProjectConfigurationCompletion.java
@@ -44,7 +44,6 @@
  *
  * @author Martin Entlicher
  */
-@ServiceProvider(service = LaunchConfigurationCompletion.class, position = 100)
 public class ProjectConfigurationCompletion implements LaunchConfigurationCompletion {
 
     private static final String CONFIG_TYPE = "java+";     // NOI18N
@@ -136,4 +135,14 @@ private static Collection<ProjectConfiguration> getConfigurations(Project p) {
         }
         return provider.getConfigurations();
     }
+
+    @ServiceProvider(service = Factory.class, position = 100)
+    public static final class FactoryImpl implements Factory {
+
+        @Override
+        public LaunchConfigurationCompletion createLaunchConfigurationCompletion(NbCodeClientCapabilities capa) {
+            return new ProjectConfigurationCompletion();
+        }
+
+    }
 }
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/QuickOpen.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/QuickOpen.java
index 69f7870af823..2a1177731e3e 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/QuickOpen.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/QuickOpen.java
@@ -61,7 +61,7 @@
 @ServiceProvider(service = CodeActionsProvider.class)
 public class QuickOpen extends CodeActionsProvider {
 
-    public static final String QUICK_OPEN =  "java.quick.open"; // NOI18N
+    public static final String QUICK_OPEN =  "nbls.quick.open"; // NOI18N
     public static final String DEFAULT_PKG =  "<default package>"; // NOI18N
     private final Gson gson = new Gson();
 
@@ -131,7 +131,7 @@ public CompletableFuture<Object> processCommand(NbCodeLanguageClient client, Str
     }
 
     @Override
-    public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+    public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
         return Collections.emptyList();
     }
 }
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/Server.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/Server.java
index ba01d4f530a3..85dec62a9fe0 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/Server.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/Server.java
@@ -49,6 +49,7 @@
 import java.util.LinkedHashSet;
 import java.util.WeakHashMap;
 import java.util.concurrent.CompletionException;
+import java.util.stream.Collectors;
 import java.util.concurrent.atomic.AtomicBoolean;
 import org.eclipse.lsp4j.CallHierarchyRegistrationOptions;
 import org.eclipse.lsp4j.CodeActionKind;
@@ -357,8 +358,8 @@ public Project next() {
 
     public static class LanguageServerImpl implements LanguageServer, LanguageClientAware, LspServerState, NbLanguageServer {
 
-        private static final String NETBEANS_FORMAT = "netbeans.format";
-        private static final String NETBEANS_JAVA_IMPORTS = "netbeans.java.imports";
+        private static final String NETBEANS_FORMAT = "format";
+        private static final String NETBEANS_JAVA_IMPORTS = "java.imports";
 
         // change to a greater throughput if the initialization waits on more processes than just (serialized) project open.
         private static final RequestProcessor SERVER_INIT_RP = new RequestProcessor(LanguageServerImpl.class.getName());
@@ -771,7 +772,7 @@ private void showStatusBarMessage(final MessageType type, final String msg, int
             }
         }
 
-        private InitializeResult constructInitResponse(InitializeParams init, JavaSource src) {
+        private InitializeResult constructInitResponse(InitializeParams init, JavaSource src, NbCodeClientCapabilities capa) {
             ServerCapabilities capabilities = new ServerCapabilities();
             if (src != null) {
                 TextDocumentSyncOptions textDocumentSyncOptions = new TextDocumentSyncOptions();
@@ -799,33 +800,35 @@ private InitializeResult constructInitResponse(InitializeParams init, JavaSource
                 CallHierarchyRegistrationOptions chOpts = new CallHierarchyRegistrationOptions();
                 chOpts.setWorkDoneProgress(true);
                 capabilities.setCallHierarchyProvider(chOpts);
-                Set<String> commands = new LinkedHashSet<>(Arrays.asList(GRAALVM_PAUSE_SCRIPT,
+                Set<String> commands = new LinkedHashSet<>(Arrays.asList(NBLS_GRAALVM_PAUSE_SCRIPT,
                         NBLS_BUILD_WORKSPACE,
                         NBLS_CLEAN_WORKSPACE,
                         NBLS_GET_ARCHIVE_FILE_CONTENT,
-                        JAVA_RUN_PROJECT_ACTION,
+                        NBLS_RUN_PROJECT_ACTION,
                         JAVA_FIND_DEBUG_ATTACH_CONFIGURATIONS,
                         JAVA_FIND_DEBUG_PROCESS_TO_ATTACH,
-                        JAVA_FIND_PROJECT_CONFIGURATIONS,
+                        NBLS_FIND_PROJECT_CONFIGURATIONS,
                         JAVA_GET_PROJECT_CLASSPATH,
                         JAVA_GET_PROJECT_PACKAGES,
                         JAVA_GET_PROJECT_SOURCE_ROOTS,
-                        JAVA_LOAD_WORKSPACE_TESTS,
-                        JAVA_RESOLVE_STACKTRACE_LOCATION,
-                        JAVA_NEW_FROM_TEMPLATE,
-                        JAVA_NEW_PROJECT,
-                        JAVA_PROJECT_CONFIGURATION_COMPLETION,
-                        JAVA_PROJECT_RESOLVE_PROJECT_PROBLEMS,
+                        NBLS_LOAD_WORKSPACE_TESTS,
+                        NBLS_RESOLVE_STACKTRACE_LOCATION,
+                        NBLS_NEW_FROM_TEMPLATE,
+                        NBLS_NEW_PROJECT,
+                        NBLS_PROJECT_CONFIGURATION_COMPLETION,
+                        NBLS_PROJECT_RESOLVE_PROJECT_PROBLEMS,
                         JAVA_SUPER_IMPLEMENTATION,
-                        JAVA_CLEAR_PROJECT_CACHES,
+                        NBLS_CLEAR_PROJECT_CACHES,
                         NATIVE_IMAGE_FIND_DEBUG_PROCESS_TO_ATTACH,
-                        JAVA_PROJECT_INFO,
+                        NBLS_PROJECT_INFO,
                         JAVA_ENABLE_PREVIEW,
                         NBLS_DOCUMENT_SYMBOLS
                 ));
                 for (CodeActionsProvider codeActionsProvider : Lookup.getDefault().lookupAll(CodeActionsProvider.class)) {
                     commands.addAll(codeActionsProvider.getCommands());
                 }
+                Utils.ensureCommandsPrefixed(commands);
+                commands = commands.stream().map(cmd -> Utils.encodeCommand(cmd, capa)).collect(Collectors.toSet());
                 capabilities.setExecuteCommandProvider(new ExecuteCommandOptions(new ArrayList<>(commands)));
                 WorkspaceSymbolOptions wsOpts = new WorkspaceSymbolOptions();
                 wsOpts.setResolveProvider(true);
@@ -915,7 +918,7 @@ public CompletableFuture<InitializeResult> initialize(InitializeParams init) {
             // but complete the InitializationRequest independently of the project initialization.
             return CompletableFuture.completedFuture(
                     finishInitialization(
-                        constructInitResponse(init, checkJavaSupport())
+                        constructInitResponse(init, checkJavaSupport(), capa)
                     )
             );
         }
@@ -942,13 +945,13 @@ private void initializeOptions() {
                     ConfigurationItem item = new ConfigurationItem();
                     FileObject fo = projects[0].getProjectDirectory();
                     item.setScopeUri(Utils.toUri(fo));
-                    item.setSection(NETBEANS_FORMAT);
+                    item.setSection(client.getNbCodeCapabilities().getConfigurationPrefix() + NETBEANS_FORMAT);
                     client.configuration(new ConfigurationParams(Collections.singletonList(item))).thenAccept(c -> {
                         if (c != null && !c.isEmpty() && c.get(0) instanceof JsonObject) {
                             workspaceService.updateJavaFormatPreferences(fo, (JsonObject) c.get(0));
                         }
                     });
-                    item.setSection(NETBEANS_JAVA_IMPORTS);
+                    item.setSection(client.getNbCodeCapabilities().getConfigurationPrefix() + NETBEANS_JAVA_IMPORTS);
                     client.configuration(new ConfigurationParams(Collections.singletonList(item))).thenAccept(c -> {
                         if (c != null && !c.isEmpty() && c.get(0) instanceof JsonObject) {
                             workspaceService.updateJavaImportPreferences(fo, (JsonObject) c.get(0));
@@ -1032,60 +1035,60 @@ public void setTrace(SetTraceParams params) {
 
     public static final String NBLS_BUILD_WORKSPACE =  "nbls.build.workspace";
     public static final String NBLS_CLEAN_WORKSPACE =  "nbls.clean.workspace";
-    public static final String JAVA_NEW_FROM_TEMPLATE =  "java.new.from.template";
-    public static final String JAVA_NEW_PROJECT =  "java.new.project";
-    public static final String JAVA_GET_PROJECT_SOURCE_ROOTS = "java.get.project.source.roots";
-    public static final String JAVA_GET_PROJECT_CLASSPATH = "java.get.project.classpath";
-    public static final String JAVA_GET_PROJECT_PACKAGES = "java.get.project.packages";
-    public static final String JAVA_LOAD_WORKSPACE_TESTS =  "java.load.workspace.tests";
-    public static final String JAVA_RESOLVE_STACKTRACE_LOCATION =  "java.resolve.stacktrace.location";
-    public static final String JAVA_SUPER_IMPLEMENTATION =  "java.super.implementation";
-    public static final String GRAALVM_PAUSE_SCRIPT =  "graalvm.pause.script";
-    public static final String JAVA_RUN_PROJECT_ACTION = "java.project.run.action";
+    public static final String NBLS_NEW_FROM_TEMPLATE =  "nbls.new.from.template";
+    public static final String NBLS_NEW_PROJECT =  "nbls.new.project";
+    public static final String JAVA_GET_PROJECT_SOURCE_ROOTS = "nbls.java.get.project.source.roots";
+    public static final String JAVA_GET_PROJECT_CLASSPATH = "nbls.java.get.project.classpath";
+    public static final String JAVA_GET_PROJECT_PACKAGES = "nbls.java.get.project.packages";
+    public static final String NBLS_LOAD_WORKSPACE_TESTS =  "nbls.load.workspace.tests";
+    public static final String NBLS_RESOLVE_STACKTRACE_LOCATION = "nbls.resolve.stacktrace.location";
+    public static final String JAVA_SUPER_IMPLEMENTATION = "nbls.java.super.implementation";
+    public static final String NBLS_GRAALVM_PAUSE_SCRIPT = "nbls.graalvm.pause.script";
+    public static final String NBLS_RUN_PROJECT_ACTION = "nbls.project.run.action";
     public static final String NBLS_GET_ARCHIVE_FILE_CONTENT = "nbls.get.archive.file.content";
 
     /**
      * Enumerates project configurations.
      */
-    public static final String JAVA_FIND_PROJECT_CONFIGURATIONS = "java.project.configurations";
+    public static final String NBLS_FIND_PROJECT_CONFIGURATIONS = "nbls.project.configurations";
     /**
      * Enumerates attach debugger configurations.
      */
-    public static final String JAVA_FIND_DEBUG_ATTACH_CONFIGURATIONS = "java.attachDebugger.configurations";
+    public static final String JAVA_FIND_DEBUG_ATTACH_CONFIGURATIONS = "nbls.java.attachDebugger.configurations";
     /**
      * Enumerates JVM processes eligible for debugger attach.
      */
-    public static final String JAVA_FIND_DEBUG_PROCESS_TO_ATTACH = "java.attachDebugger.pickProcess";
+    public static final String JAVA_FIND_DEBUG_PROCESS_TO_ATTACH = "nbls.java.attachDebugger.pickProcess";
     /**
      * Enumerates native processes eligible for debugger attach.
      */
-    public static final String NATIVE_IMAGE_FIND_DEBUG_PROCESS_TO_ATTACH = "nativeImage.attachDebugger.pickProcess";
+    public static final String NATIVE_IMAGE_FIND_DEBUG_PROCESS_TO_ATTACH = "nbls.nativeImage.attachDebugger.pickProcess";
     /**
      * Provides code-completion of configurations.
      */
-    public static final String JAVA_PROJECT_CONFIGURATION_COMPLETION = "java.project.configuration.completion";
+    public static final String NBLS_PROJECT_CONFIGURATION_COMPLETION = "nbls.project.configuration.completion";
     /**
      * Provides resolution of project problems.
      */
-    public static final String JAVA_PROJECT_RESOLVE_PROJECT_PROBLEMS = "java.project.resolveProjectProblems";
+    public static final String NBLS_PROJECT_RESOLVE_PROJECT_PROBLEMS = "nbls.project.resolveProjectProblems";
 
 
     /**
      * Diagnostic / test command: clears NBLS internal project caches. Useful between testcases and after
      * new project files were generated into workspace subtree.
      */
-    public static final String JAVA_CLEAR_PROJECT_CACHES =  "java.clear.project.caches";
+    public static final String NBLS_CLEAR_PROJECT_CACHES =  "nbls.clear.project.caches";
     
     /**
      * For a project directory, returns basic project information and structure.
      * Syntax: nbls.project.info(locations : String | String[], options? : { projectStructure? : boolean; actions? : boolean; recursive? : boolean }) : LspProjectInfo
      */
-    public static final String JAVA_PROJECT_INFO = "nbls.project.info";
+    public static final String NBLS_PROJECT_INFO = "nbls.project.info";
 
     /**
      * Provides enable preview for given project
      */
-    public static final String JAVA_ENABLE_PREVIEW = "java.project.enable.preview";
+    public static final String JAVA_ENABLE_PREVIEW = "nbls.java.project.enable.preview";
 
     /**
      * Provides symbols for the given document
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/SurroundWithHint.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/SurroundWithHint.java
index c7bff0f383c7..d851d30a1955 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/SurroundWithHint.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/SurroundWithHint.java
@@ -80,7 +80,7 @@
 public final class SurroundWithHint extends CodeActionsProvider {
 
     private static final String COMMAND_INSERT_SNIPPET = "editor.action.insertSnippet";
-    private static final String COMMAND_SURROUND_WITH = "java.surround.with";
+    private static final String COMMAND_SURROUND_WITH = "surround.with";
     private static final String DOTS = "...";
     private static final String SNIPPET = "snippet";
     private static final String SELECTION_VAR = "${selection}";
@@ -96,7 +96,7 @@ public final class SurroundWithHint extends CodeActionsProvider {
         "DN_SurroundWith=Surround with {0}",
         "DN_SurroundWithAll=Surround with ...",
     })
-    public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+    public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
         CompilationController info = CompilationController.get(resultIterator.getParserResult());
         if (info == null) {
             return Collections.emptyList();
@@ -134,7 +134,7 @@ public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeAction
                         snippet = sb.append(snippet).toString();
                     }
                     int idx = label.indexOf(' ');
-                    CodeAction codeAction = createCodeAction(Bundle.DN_SurroundWith(idx < 0 ? label : label.substring(0, idx)), CodeActionKind.RefactorRewrite, null, COMMAND_INSERT_SNIPPET, Collections.singletonMap(SNIPPET, snippet));
+                    CodeAction codeAction = createCodeAction(client, Bundle.DN_SurroundWith(idx < 0 ? label : label.substring(0, idx)), CodeActionKind.RefactorRewrite, null, COMMAND_INSERT_SNIPPET, Collections.singletonMap(SNIPPET, snippet));
                     if (!edits.isEmpty()) {
                         codeAction.setEdit(new WorkspaceEdit(Collections.singletonMap(params.getTextDocument().getUri(), edits)));
                     }
@@ -146,7 +146,7 @@ public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeAction
             }
         }
         if (items.size() > codeActions.size()) {
-            codeActions.add(createCodeAction(Bundle.DN_SurroundWithAll(), CodeActionKind.RefactorRewrite, null, COMMAND_SURROUND_WITH, items));
+            codeActions.add(createCodeAction(client, Bundle.DN_SurroundWithAll(), CodeActionKind.RefactorRewrite, null, COMMAND_SURROUND_WITH, items));
         }
         return codeActions;
     }
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/TestClassGenerator.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/TestClassGenerator.java
index cc1d3a0032d6..3094f46802a5 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/TestClassGenerator.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/TestClassGenerator.java
@@ -75,7 +75,7 @@
 @ServiceProvider(service = CodeActionsProvider.class, position = 100)
 public final class TestClassGenerator extends CodeActionsProvider {
 
-    private static final String GENERATE_TEST_CLASS_COMMAND = "java.generate.testClass";
+    private static final String GENERATE_TEST_CLASS_COMMAND = "nbls.java.generate.testClass";
 
     @Override
     @NbBundle.Messages({
@@ -83,7 +83,7 @@ public final class TestClassGenerator extends CodeActionsProvider {
         "# {1} - the location where the test class will be created",
         "DN_GenerateTestClass=Create Test Class [{0} in {1}]"
     })
-    public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+    public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
         CompilationController info = CompilationController.get(resultIterator.getParserResult());
         if (info == null) {
             return Collections.emptyList();
@@ -123,7 +123,7 @@ public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeAction
         for (Map.Entry<Object, List<String>> entrySet : validCombinations.entrySet()) {
             Object location = entrySet.getKey();
             for (String testingFramework : entrySet.getValue()) {
-                result.add((createCodeAction(Bundle.DN_GenerateTestClass(testingFramework, getLocationText(location)), CodeActionKind.Refactor, null, GENERATE_TEST_CLASS_COMMAND, Utils.toUri(fileObject), testingFramework, Utils.toUri(getTargetFolder(location)))));
+                result.add((createCodeAction(client, Bundle.DN_GenerateTestClass(testingFramework, getLocationText(location)), CodeActionKind.Refactor, null, GENERATE_TEST_CLASS_COMMAND, Utils.toUri(fileObject), testingFramework, Utils.toUri(getTargetFolder(location)))));
             }
         }
 	return result;
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/TextDocumentServiceImpl.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/TextDocumentServiceImpl.java
index 75bd96a18e83..b52a118a49dc 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/TextDocumentServiceImpl.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/TextDocumentServiceImpl.java
@@ -264,10 +264,10 @@
 public class TextDocumentServiceImpl implements TextDocumentService, LanguageClientAware {
     private static final Logger LOG = Logger.getLogger(TextDocumentServiceImpl.class.getName());
     
-    private static final String COMMAND_RUN_SINGLE = "java.run.single";         // NOI18N
-    private static final String COMMAND_DEBUG_SINGLE = "java.debug.single";     // NOI18N
-    private static final String NETBEANS_JAVADOC_LOAD_TIMEOUT = "netbeans.javadoc.load.timeout";// NOI18N
-    private static final String NETBEANS_JAVA_ON_SAVE_ORGANIZE_IMPORTS = "netbeans.java.onSave.organizeImports";// NOI18N
+    private static final String COMMAND_RUN_SINGLE = "nbls.run.single";         // NOI18N
+    private static final String COMMAND_DEBUG_SINGLE = "nbls.debug.single";     // NOI18N
+    private static final String NETBEANS_JAVADOC_LOAD_TIMEOUT = "javadoc.load.timeout";// NOI18N
+    private static final String NETBEANS_JAVA_ON_SAVE_ORGANIZE_IMPORTS = "java.onSave.organizeImports";// NOI18N
     private static final String URL = "url";// NOI18N
     private static final String INDEX = "index";// NOI18N
     
@@ -344,7 +344,7 @@ public CompletableFuture<Either<List<CompletionItem>, CompletionList>> completio
             StyledDocument doc = (StyledDocument)rawDoc;
             ConfigurationItem conf = new ConfigurationItem();
             conf.setScopeUri(uri);
-            conf.setSection(NETBEANS_JAVADOC_LOAD_TIMEOUT);
+            conf.setSection(client.getNbCodeCapabilities().getConfigurationPrefix() + NETBEANS_JAVADOC_LOAD_TIMEOUT);
             return client.configuration(new ConfigurationParams(Collections.singletonList(conf))).thenApply(c -> {
                 if (c != null && !c.isEmpty()) {
                     javadocTimeout.set(((JsonPrimitive)c.get(0)).getAsInt());
@@ -394,7 +394,7 @@ public CompletableFuture<Either<List<CompletionItem>, CompletionList>> completio
                         }
                         org.netbeans.api.lsp.Command command = completion.getCommand();
                         if (command != null) {
-                            item.setCommand(new Command(command.getTitle(), command.getCommand(), command.getArguments()));
+                            item.setCommand(new Command(command.getTitle(), Utils.encodeCommand(command.getCommand(), client.getNbCodeCapabilities()), command.getArguments()));
                         }
                         if (completion.getAdditionalTextEdits() != null && completion.getAdditionalTextEdits().isDone()) {
                             List<org.netbeans.api.lsp.TextEdit> additionalTextEdits = completion.getAdditionalTextEdits().getNow(null);
@@ -960,7 +960,7 @@ public CompletableFuture<List<Either<Command, CodeAction>>> codeAction(CodeActio
                                     commandParams.addAll(inputAction.getCommand().getArguments());
                                 }
 
-                                action.setCommand(new Command(inputAction.getCommand().getTitle(), inputAction.getCommand().getCommand(), commandParams));
+                                action.setCommand(new Command(inputAction.getCommand().getTitle(), Utils.encodeCommand(inputAction.getCommand().getCommand(), client.getNbCodeCapabilities()), commandParams));
                             }
                             if (inputAction instanceof LazyCodeAction && ((LazyCodeAction) inputAction).getLazyEdit() != null) {
                                 lastCodeActions.add((LazyCodeAction) inputAction);
@@ -1016,7 +1016,7 @@ public void run(ResultIterator resultIterator) throws Exception {
                         //code generators:
                         for (CodeActionsProvider codeGenerator : Lookup.getDefault().lookupAll(CodeActionsProvider.class)) {
                             try {
-                                for (CodeAction codeAction : codeGenerator.getCodeActions(resultIterator, params)) {
+                                for (CodeAction codeAction : codeGenerator.getCodeActions(client, resultIterator, params)) {
                                     result.add(Either.forRight(codeAction));
                                 }
                             } catch (Exception ex) {
@@ -1055,7 +1055,7 @@ public void run(ResultIterator resultIterator) throws Exception {
                                                             codeAction.setEdit(new WorkspaceEdit(documentChanges));
                                                             int renameOffset = ((IntroduceFixBase) fix).getNameOffset(changes);
                                                             if (renameOffset >= 0) {
-                                                                codeAction.setCommand(new Command("Rename", "java.rename.element.at", Collections.singletonList(renameOffset)));
+                                                                codeAction.setCommand(new Command("Rename", client.getNbCodeCapabilities().getCommandPrefix() + ".rename.element.at", Collections.singletonList(renameOffset)));
                                                             }
                                                             result.add(Either.forRight(codeAction));
                                                         }
@@ -1167,7 +1167,7 @@ private List<CodeLens> convertCodeLens(Document doc, List<? extends org.netbeans
         for (org.netbeans.api.lsp.CodeLens len : origin) {
             Command cmd = null;
             if (len.getCommand() != null) {
-                cmd = new Command(len.getCommand().getTitle(), len.getCommand().getCommand(), len.getCommand().getArguments());
+                cmd = new Command(len.getCommand().getTitle(), Utils.encodeCommand(len.getCommand().getCommand(), client.getNbCodeCapabilities()), len.getCommand().getArguments());
             }
             result.add(new CodeLens(callRange2Range(len.getRange(), doc), cmd, len.getData()));
         }
@@ -1688,7 +1688,7 @@ public CompletableFuture<List<TextEdit>> willSaveWaitUntil(WillSaveTextDocumentP
         }
         ConfigurationItem conf = new ConfigurationItem();
         conf.setScopeUri(uri);
-        conf.setSection(NETBEANS_JAVA_ON_SAVE_ORGANIZE_IMPORTS);
+        conf.setSection(client.getNbCodeCapabilities().getConfigurationPrefix() + NETBEANS_JAVA_ON_SAVE_ORGANIZE_IMPORTS);
         return client.configuration(new ConfigurationParams(Collections.singletonList(conf))).thenApply(c -> {
             if (c != null && !c.isEmpty() && ((JsonPrimitive) c.get(0)).getAsBoolean()) {
                 try {
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/ToStringGenerator.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/ToStringGenerator.java
index af2901473ee4..3c5ae1df64d9 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/ToStringGenerator.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/ToStringGenerator.java
@@ -72,7 +72,7 @@ public final class ToStringGenerator extends CodeActionsProvider {
     @NbBundle.Messages({
         "DN_GenerateToString=Generate toString()...",
     })
-    public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+    public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
         List<String> only = params.getContext().getOnly();
         if (only == null || !only.contains(CodeActionKind.Source)) {
             return Collections.emptyList();
@@ -114,7 +114,7 @@ public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeAction
         data.put(URI, uri);
         data.put(OFFSET, offset);
         data.put(FIELDS, fields);
-        return Collections.singletonList(createCodeAction(Bundle.DN_GenerateToString(), CODE_GENERATOR_KIND, data, fields.isEmpty() ? null : "workbench.action.focusActiveEditorGroup"));
+        return Collections.singletonList(createCodeAction(client, Bundle.DN_GenerateToString(), CODE_GENERATOR_KIND, data, fields.isEmpty() ? null : "workbench.action.focusActiveEditorGroup"));
     }
 
     @Override
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/WorkspaceServiceImpl.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/WorkspaceServiceImpl.java
index 8cebda5b814c..cdd7f6abed22 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/WorkspaceServiceImpl.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/protocol/WorkspaceServiceImpl.java
@@ -172,15 +172,15 @@ public final class WorkspaceServiceImpl implements WorkspaceService, LanguageCli
 
     @Override
     public CompletableFuture<Object> executeCommand(ExecuteCommandParams params) {
-        String command = params.getCommand();
+        String command = Utils.decodeCommand(params.getCommand(), client.getNbCodeCapabilities());
         switch (command) {
-            case Server.GRAALVM_PAUSE_SCRIPT:
+            case Server.NBLS_GRAALVM_PAUSE_SCRIPT:
                 ActionsManager am = DebuggerManager.getDebuggerManager().getCurrentEngine().getActionsManager();
                 am.doAction("pauseInGraalScript");
                 return CompletableFuture.completedFuture(true);
-            case Server.JAVA_NEW_FROM_TEMPLATE:
+            case Server.NBLS_NEW_FROM_TEMPLATE:
                 return LspTemplateUI.createFromTemplate("Templates", client, params);
-            case Server.JAVA_NEW_PROJECT:
+            case Server.NBLS_NEW_PROJECT:
                 return LspTemplateUI.createProject("Templates/Project", client, params);
             case Server.NBLS_BUILD_WORKSPACE: {
                 final CommandProgress progressOfCompilation = new CommandProgress();
@@ -194,7 +194,7 @@ public CompletableFuture<Object> executeCommand(ExecuteCommandParams params) {
                 progressOfCompilation.checkStatus();
                 return progressOfCompilation.getFinishFuture();
             }
-            case Server.JAVA_RUN_PROJECT_ACTION: {
+            case Server.NBLS_RUN_PROJECT_ACTION: {
                 // TODO: maybe a structure would be better for future compatibility / extensions, i.e. what to place in the action's context Lookup.
                 List<FileObject> targets = new ArrayList<>();
                 ProjectActionParams actionParams = gson.fromJson(gson.toJson(params.getArguments().get(0)), ProjectActionParams.class);
@@ -337,7 +337,7 @@ public CompletableFuture<Object> executeCommand(ExecuteCommandParams params) {
                     return future;
                 });
             }
-            case Server.JAVA_LOAD_WORKSPACE_TESTS: {
+            case Server.NBLS_LOAD_WORKSPACE_TESTS: {
                 String uri = ((JsonPrimitive) params.getArguments().get(0)).getAsString();
                 FileObject file;
                 try {
@@ -420,7 +420,7 @@ public CompletableFuture<Object> executeCommand(ExecuteCommandParams params) {
                     return future;
                 });
             }
-            case Server.JAVA_RESOLVE_STACKTRACE_LOCATION: {
+            case Server.NBLS_RESOLVE_STACKTRACE_LOCATION: {
                 CompletableFuture<Object> future = new CompletableFuture<>();
                 try {
                     if (params.getArguments().size() >= 3) {
@@ -467,7 +467,7 @@ public CompletableFuture<Object> executeCommand(ExecuteCommandParams params) {
                 String uri = ((JsonPrimitive) params.getArguments().get(0)).getAsString();
                 Position pos = gson.fromJson(gson.toJson(params.getArguments().get(1)), Position.class);
                 return (CompletableFuture)((TextDocumentServiceImpl)server.getTextDocumentService()).superImplementations(uri, pos);
-            case Server.JAVA_FIND_PROJECT_CONFIGURATIONS: {
+            case Server.NBLS_FIND_PROJECT_CONFIGURATIONS: {
                 String fileUri = ((JsonPrimitive) params.getArguments().get(0)).getAsString();
                 
                 FileObject file;
@@ -481,7 +481,7 @@ public CompletableFuture<Object> executeCommand(ExecuteCommandParams params) {
                 return findProjectConfigurations(file);
             }
             case Server.JAVA_FIND_DEBUG_ATTACH_CONFIGURATIONS: {
-                return AttachConfigurations.findConnectors();
+                return AttachConfigurations.findConnectors(client.getNbCodeCapabilities());
             }
             case Server.JAVA_FIND_DEBUG_PROCESS_TO_ATTACH: {
                 return AttachConfigurations.findProcessAttachTo(client);
@@ -489,7 +489,7 @@ public CompletableFuture<Object> executeCommand(ExecuteCommandParams params) {
             case Server.NATIVE_IMAGE_FIND_DEBUG_PROCESS_TO_ATTACH: {
                 return AttachNativeConfigurations.findProcessAttachTo(client);
             }
-            case Server.JAVA_PROJECT_CONFIGURATION_COMPLETION: {
+            case Server.NBLS_PROJECT_CONFIGURATION_COMPLETION: {
                 // We expect one, two or three arguments.
                 // The first argument is always the URI of the launch.json file.
                 // When not more arguments are provided, all available configurations ought to be provided.
@@ -497,7 +497,11 @@ public CompletableFuture<Object> executeCommand(ExecuteCommandParams params) {
                 // and additional attributes valid in that particular configuration ought to be provided.
                 // When a third argument is present, it's an attribute name whose possible values ought to be provided.
                 List<Object> arguments = params.getArguments();
-                Collection<? extends LaunchConfigurationCompletion> configurations = Lookup.getDefault().lookupAll(LaunchConfigurationCompletion.class);
+                Collection<? extends LaunchConfigurationCompletion> configurations = Lookup.getDefault()
+                                                                                           .lookupAll(LaunchConfigurationCompletion.Factory.class)
+                                                                                           .stream()
+                                                                                           .map(f -> f.createLaunchConfigurationCompletion(client.getNbCodeCapabilities()))
+                                                                                           .collect(Collectors.toList());
                 List<CompletableFuture<List<CompletionItem>>> completionFutures;
                 String configUri = ((JsonPrimitive) arguments.get(0)).getAsString();
                 Supplier<CompletableFuture<Project>> projectSupplier = () -> {
@@ -534,7 +538,7 @@ public CompletableFuture<Object> executeCommand(ExecuteCommandParams params) {
                         .thenApply(avoid -> completionFutures.stream().flatMap(c -> c.join().stream()).collect(Collectors.toList()));
                 return (CompletableFuture<Object>) (CompletableFuture<?>) joinedFuture;
             }
-            case Server.JAVA_PROJECT_RESOLVE_PROJECT_PROBLEMS: {
+            case Server.NBLS_PROJECT_RESOLVE_PROJECT_PROBLEMS: {
                 final CompletableFuture<Object> result = new CompletableFuture<>();
                 List<Object> arguments = params.getArguments();
                 if (!arguments.isEmpty()) {
@@ -590,7 +594,7 @@ public CompletableFuture<Object> executeCommand(ExecuteCommandParams params) {
                 }
                 return result;
             }
-            case Server.JAVA_CLEAR_PROJECT_CACHES: {
+            case Server.NBLS_CLEAR_PROJECT_CACHES: {
                 // politely clear project manager's cache of "no project" answers
                 ProjectManager.getDefault().clearNonProjectCache();
                 // impolitely clean the project-based traversal's cache, so any affiliation of intermediate folders will disappear
@@ -614,7 +618,7 @@ public CompletableFuture<Object> executeCommand(ExecuteCommandParams params) {
                 return (CompletableFuture<Object>) (CompletableFuture<?>)result;
             }
             
-            case Server.JAVA_PROJECT_INFO: {
+            case Server.NBLS_PROJECT_INFO: {
                 final CompletableFuture<Object> result = new CompletableFuture<>();
                 List<Object> arguments = params.getArguments();
                 if (arguments.size() < 1) {
@@ -1256,17 +1260,24 @@ private static String getSimpleName (
 
     @Override
     public void didChangeConfiguration(DidChangeConfigurationParams params) {
+        String fullConfigPrefix = client.getNbCodeCapabilities().getConfigurationPrefix();
+        String configPrefix = fullConfigPrefix.substring(0, fullConfigPrefix.length() - 1);
         server.openedProjects().thenAccept(projects -> {
             if (projects != null && projects.length > 0) {
-                updateJavaFormatPreferences(projects[0].getProjectDirectory(), ((JsonObject) params.getSettings()).getAsJsonObject("netbeans").getAsJsonObject("format"));
-                updateJavaImportPreferences(projects[0].getProjectDirectory(), ((JsonObject) params.getSettings()).getAsJsonObject("netbeans").getAsJsonObject("java").getAsJsonObject("imports"));
+                updateJavaFormatPreferences(projects[0].getProjectDirectory(), ((JsonObject) params.getSettings()).getAsJsonObject(configPrefix).getAsJsonObject("format"));
+                updateJavaImportPreferences(projects[0].getProjectDirectory(), ((JsonObject) params.getSettings()).getAsJsonObject(configPrefix).getAsJsonObject("java").getAsJsonObject("imports"));
             }
         });
+        String fullAltConfigPrefix = client.getNbCodeCapabilities().getAltConfigurationPrefix();
+        String altConfigPrefix = fullConfigPrefix.substring(0, fullAltConfigPrefix.length() - 1);
         boolean modified = false;
         String newVMOptions = "";
-        JsonObject javaPlus = ((JsonObject) params.getSettings()).getAsJsonObject("java+");
+        JsonObject javaPlus = ((JsonObject) params.getSettings()).getAsJsonObject(altConfigPrefix);
         if (javaPlus != null) {
-            newVMOptions = javaPlus.getAsJsonObject("runConfig").getAsJsonPrimitive("vmOptions").getAsString();
+            JsonObject runConfig = javaPlus.getAsJsonObject("runConfig");
+            if (runConfig != null) {
+                newVMOptions = runConfig.getAsJsonPrimitive("vmOptions").getAsString();
+            }
         }
         for (CompilerOptionsQueryImpl query : Lookup.getDefault().lookupAll(CompilerOptionsQueryImpl.class)) {
             modified |= query.setConfiguration(client, newVMOptions);
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/refactoring/ChangeMethodParametersRefactoring.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/refactoring/ChangeMethodParametersRefactoring.java
index 578a5f24ef86..2cfead6c5d85 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/refactoring/ChangeMethodParametersRefactoring.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/refactoring/ChangeMethodParametersRefactoring.java
@@ -77,7 +77,7 @@
 public final class ChangeMethodParametersRefactoring extends CodeRefactoring {
 
     private static final String CHANGE_METHOD_PARAMS_REFACTORING_KIND = "refactor.change.method.params";
-    private static final String CHANGE_METHOD_PARAMS_REFACTORING_COMMAND =  "java.refactor.change.method.params";
+    private static final String CHANGE_METHOD_PARAMS_REFACTORING_COMMAND =  "nbls.java.refactor.change.method.params";
 
     private final Gson gson = new Gson();
 
@@ -85,7 +85,7 @@ public final class ChangeMethodParametersRefactoring extends CodeRefactoring {
     @NbBundle.Messages({
         "DN_ChangeMethodParams=Change Method Parameters...",
     })
-    public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+    public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
         List<String> only = params.getContext().getOnly();
         if (only == null || !only.contains(CodeActionKind.Refactor)) {
             return Collections.emptyList();
@@ -125,7 +125,7 @@ public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeAction
         }
         QuickPickItem elementItem = new QuickPickItem(createLabel(info, element, true));
         elementItem.setUserData(new ElementData(element));
-        return Collections.singletonList(createCodeAction(Bundle.DN_ChangeMethodParams(), CHANGE_METHOD_PARAMS_REFACTORING_KIND, null, CHANGE_METHOD_PARAMS_REFACTORING_COMMAND, Utils.toUri(elementSource), elementItem));
+        return Collections.singletonList(createCodeAction(client, Bundle.DN_ChangeMethodParams(), CHANGE_METHOD_PARAMS_REFACTORING_KIND, null, CHANGE_METHOD_PARAMS_REFACTORING_COMMAND, Utils.toUri(elementSource), elementItem));
     }
 
     @Override
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/refactoring/ExtractSuperclassOrInterfaceRefactoring.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/refactoring/ExtractSuperclassOrInterfaceRefactoring.java
index 4303235dbdaa..00df78a24d3b 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/refactoring/ExtractSuperclassOrInterfaceRefactoring.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/refactoring/ExtractSuperclassOrInterfaceRefactoring.java
@@ -79,8 +79,8 @@
 @ServiceProvider(service = CodeActionsProvider.class, position = 170)
 public final class ExtractSuperclassOrInterfaceRefactoring extends CodeRefactoring {
 
-    private static final String EXTRACT_SUPERCLASS_REFACTORING_COMMAND =  "java.refactor.extract.superclass";
-    private static final String EXTRACT_INTERFACE_REFACTORING_COMMAND =  "java.refactor.extract.interface";
+    private static final String EXTRACT_SUPERCLASS_REFACTORING_COMMAND =  "nbls.java.refactor.extract.superclass";
+    private static final String EXTRACT_INTERFACE_REFACTORING_COMMAND =  "nbls.java.refactor.extract.interface";
     private static final ClassPath EMPTY_PATH = ClassPathSupport.createClassPath(new URL[0]);
 
     private final Set<String> commands = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(EXTRACT_INTERFACE_REFACTORING_COMMAND, EXTRACT_SUPERCLASS_REFACTORING_COMMAND)));
@@ -91,7 +91,7 @@ public final class ExtractSuperclassOrInterfaceRefactoring extends CodeRefactori
         "DN_ExtractSuperclass=Extract Superclass...",
         "DN_ExtractInterface=Extract Interface...",
     })
-    public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+    public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
         List<String> only = params.getContext().getOnly();
         if (only == null || !only.contains(CodeActionKind.Refactor)) {
             return Collections.emptyList();
@@ -158,10 +158,10 @@ public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeAction
             QuickPickItem elementItem = new QuickPickItem(createLabel(info, type));
             elementItem.setUserData(new ElementData(type));
             if (!type.getKind().isInterface()) {
-                result.add(createCodeAction(Bundle.DN_ExtractSuperclass(), CodeActionKind.RefactorExtract, null, EXTRACT_SUPERCLASS_REFACTORING_COMMAND, uri, elementItem, allMembers));
+                result.add(createCodeAction(client, Bundle.DN_ExtractSuperclass(), CodeActionKind.RefactorExtract, null, EXTRACT_SUPERCLASS_REFACTORING_COMMAND, uri, elementItem, allMembers));
             }
             if (!members.isEmpty()) {
-                result.add(createCodeAction(Bundle.DN_ExtractInterface(), CodeActionKind.RefactorExtract, null, EXTRACT_INTERFACE_REFACTORING_COMMAND, uri, elementItem, members));
+                result.add(createCodeAction(client, Bundle.DN_ExtractInterface(), CodeActionKind.RefactorExtract, null, EXTRACT_INTERFACE_REFACTORING_COMMAND, uri, elementItem, members));
             }
         }
         return result;
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/refactoring/MoveRefactoring.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/refactoring/MoveRefactoring.java
index 8b1ce315ac41..9a428d86173f 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/refactoring/MoveRefactoring.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/refactoring/MoveRefactoring.java
@@ -99,7 +99,7 @@
 public final class MoveRefactoring extends CodeRefactoring {
 
     private static final String MOVE_REFACTORING_KIND = "refactor.move";
-    private static final String MOVE_REFACTORING_COMMAND =  "java.refactor.move";
+    private static final String MOVE_REFACTORING_COMMAND =  "nbls.java.refactor.move";
     private static final ClassPath EMPTY_PATH = ClassPathSupport.createClassPath(new URL[0]);
 
     private final Gson gson = new Gson();
@@ -108,7 +108,7 @@ public final class MoveRefactoring extends CodeRefactoring {
     @NbBundle.Messages({
         "DN_Move=Move...",
     })
-    public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+    public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
         List<String> only = params.getContext().getOnly();
         if (only == null || !only.contains(CodeActionKind.Refactor)) {
             return Collections.emptyList();
@@ -127,9 +127,9 @@ public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeAction
         String uri = Utils.toUri(info.getFileObject());
         Element element = elementForOffset(info, offset);
         if (element != null) {
-            return Collections.singletonList(createCodeAction(Bundle.DN_Move(), MOVE_REFACTORING_KIND, null, MOVE_REFACTORING_COMMAND, uri, new ElementData(element)));
+            return Collections.singletonList(createCodeAction(client, Bundle.DN_Move(), MOVE_REFACTORING_KIND, null, MOVE_REFACTORING_COMMAND, uri, new ElementData(element)));
         } else {
-            return Collections.singletonList(createCodeAction(Bundle.DN_Move(), MOVE_REFACTORING_KIND, null, MOVE_REFACTORING_COMMAND, uri));
+            return Collections.singletonList(createCodeAction(client, Bundle.DN_Move(), MOVE_REFACTORING_KIND, null, MOVE_REFACTORING_COMMAND, uri));
         }
     }
 
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/refactoring/PullUpRefactoring.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/refactoring/PullUpRefactoring.java
index ca063171ba68..4ea2ecb0f92f 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/refactoring/PullUpRefactoring.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/refactoring/PullUpRefactoring.java
@@ -76,7 +76,7 @@
 public final class PullUpRefactoring extends CodeRefactoring {
 
     private static final String PULL_UP_REFACTORING_KIND = "refactor.pull.up";
-    private static final String PULL_UP_REFACTORING_COMMAND =  "java.refactor.pull.up";
+    private static final String PULL_UP_REFACTORING_COMMAND =  "nbls.java.refactor.pull.up";
 
     private final Gson gson = new Gson();
 
@@ -84,7 +84,7 @@ public final class PullUpRefactoring extends CodeRefactoring {
     @NbBundle.Messages({
         "DN_PullUp=Pull Up...",
     })
-    public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+    public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
         List<String> only = params.getContext().getOnly();
         if (only == null || !only.contains(CodeActionKind.Refactor)) {
             return Collections.emptyList();
@@ -125,7 +125,7 @@ public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeAction
         }
         QuickPickItem elementItem = new QuickPickItem(createLabel(info, element));
         elementItem.setUserData(new ElementData(element));
-        return Collections.singletonList(createCodeAction(Bundle.DN_PullUp(), PULL_UP_REFACTORING_KIND, null, PULL_UP_REFACTORING_COMMAND, uri, offset, elementItem, supertypeItems));
+        return Collections.singletonList(createCodeAction(client, Bundle.DN_PullUp(), PULL_UP_REFACTORING_KIND, null, PULL_UP_REFACTORING_COMMAND, uri, offset, elementItem, supertypeItems));
     }
 
     @Override
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/refactoring/PushDownRefactoring.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/refactoring/PushDownRefactoring.java
index 0bbc84c123bf..de55a9176ffb 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/refactoring/PushDownRefactoring.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/refactoring/PushDownRefactoring.java
@@ -72,7 +72,7 @@
 public final class PushDownRefactoring extends CodeRefactoring {
 
     private static final String PUSH_DOWN_REFACTORING_KIND = "refactor.push.down";
-    private static final String PUSH_DOWN_REFACTORING_COMMAND =  "java.refactor.push.down";
+    private static final String PUSH_DOWN_REFACTORING_COMMAND =  "nbls.java.refactor.push.down";
 
     private final Gson gson = new Gson();
 
@@ -80,7 +80,7 @@ public final class PushDownRefactoring extends CodeRefactoring {
     @NbBundle.Messages({
         "DN_PushDown=Push Down...",
     })
-    public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+    public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
         List<String> only = params.getContext().getOnly();
         if (only == null || !only.contains(CodeActionKind.Refactor)) {
             return Collections.emptyList();
@@ -136,7 +136,7 @@ public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeAction
         }
         QuickPickItem elementItem = new QuickPickItem(createLabel(info, element));
         elementItem.setUserData(new ElementData(element));
-        return Collections.singletonList(createCodeAction(Bundle.DN_PushDown(), PUSH_DOWN_REFACTORING_KIND, null, PUSH_DOWN_REFACTORING_COMMAND, uri, elementItem, members));
+        return Collections.singletonList(createCodeAction(client, Bundle.DN_PushDown(), PUSH_DOWN_REFACTORING_KIND, null, PUSH_DOWN_REFACTORING_COMMAND, uri, elementItem, members));
     }
 
     @Override
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/singlesourcefile/EnablePreviewSingleSourceFile.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/singlesourcefile/EnablePreviewSingleSourceFile.java
index 562f9fc32824..019e46d782d9 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/singlesourcefile/EnablePreviewSingleSourceFile.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/singlesourcefile/EnablePreviewSingleSourceFile.java
@@ -65,7 +65,7 @@ public void enablePreview(String newSourceLevel) throws Exception {
 
         ConfigurationItem conf = new ConfigurationItem();
         conf.setScopeUri(Utils.toUri(file));
-        conf.setSection("java+.runConfig.vmOptions"); //XXX
+        conf.setSection(client.getNbCodeCapabilities().getAltConfigurationPrefix() + "runConfig.vmOptions");
         client.configuration(new ConfigurationParams(Collections.singletonList(conf))).thenApply(c -> {
             String compilerArgs = ((JsonPrimitive) ((List<Object>) c).get(0)).getAsString();
             if (compilerArgs == null) {
@@ -84,7 +84,7 @@ public void enablePreview(String newSourceLevel) throws Exception {
             } else {
                 compilerArgs += (compilerArgs.isEmpty() ? "" : " ") + ENABLE_PREVIEW_FLAG + " " + SOURCE_FLAG + " " + realNewSourceLevel;
             }
-            client.configurationUpdate(new UpdateConfigParams("java+.runConfig", "vmOptions", compilerArgs));
+            client.configurationUpdate(new UpdateConfigParams(client.getNbCodeCapabilities().getAltConfigurationPrefix() + "runConfig", "vmOptions", compilerArgs));
             return null;
         });
     }
diff --git a/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/explorer/ProjectViewTest.java b/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/explorer/ProjectViewTest.java
index 9c1d2aac8fe1..060c4c6200a7 100644
--- a/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/explorer/ProjectViewTest.java
+++ b/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/explorer/ProjectViewTest.java
@@ -358,7 +358,7 @@ private TreeItem createAndFindProjectNode() throws Exception {
     public class ServerLookupExtractionCommand extends CodeActionsProvider {
 
         @Override
-        public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+        public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
             return Collections.emptyList();
         }
 
diff --git a/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/protocol/ServerTest.java b/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/protocol/ServerTest.java
index 84867cfa977d..16cbd7b29b41 100644
--- a/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/protocol/ServerTest.java
+++ b/java/java.lsp.server/test/unit/src/org/netbeans/modules/java/lsp/server/protocol/ServerTest.java
@@ -238,7 +238,7 @@ public ServerLookupExtractionCommand() {
         }
         
         @Override
-        public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+        public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
             return Collections.emptyList();
         }
 
@@ -2561,7 +2561,7 @@ public CompletableFuture<ApplyWorkspaceEditResponse> applyEdit(ApplyWorkspaceEdi
                      fileChanges.get(3).getNewText());
         Command command = introduceVariable.get().getCommand();
         assertNotNull(command);
-        assertEquals("java.rename.element.at", command.getCommand());
+        assertEquals("nbls.rename.element.at", command.getCommand());
         List<Object> arguments = command.getArguments();
         assertNotNull(arguments);
         assertEquals(1, arguments.size());
@@ -2664,7 +2664,7 @@ public CompletableFuture<ApplyWorkspaceEditResponse> applyEdit(ApplyWorkspaceEdi
                      fileChanges.get(2).getNewText());
         Command command = introduceConstant.get().getCommand();
         assertNotNull(command);
-        assertEquals("java.rename.element.at", command.getCommand());
+        assertEquals("nbls.rename.element.at", command.getCommand());
         List<Object> arguments = command.getArguments();
         assertNotNull(arguments);
         assertEquals(1, arguments.size());
@@ -2767,7 +2767,7 @@ public CompletableFuture<ApplyWorkspaceEditResponse> applyEdit(ApplyWorkspaceEdi
                      fileChanges.get(2).getNewText());
         Command command = introduceField.get().getCommand();
         assertNotNull(command);
-        assertEquals("java.rename.element.at", command.getCommand());
+        assertEquals("nbls.rename.element.at", command.getCommand());
         List<Object> arguments = command.getArguments();
         assertNotNull(arguments);
         assertEquals(1, arguments.size());
@@ -2873,7 +2873,7 @@ public CompletableFuture<ApplyWorkspaceEditResponse> applyEdit(ApplyWorkspaceEdi
                      fileChanges.get(2).getNewText());
         Command command = introduceMethod.get().getCommand();
         assertNotNull(command);
-        assertEquals("java.rename.element.at", command.getCommand());
+        assertEquals("nbls.rename.element.at", command.getCommand());
         List<Object> arguments = command.getArguments();
         assertNotNull(arguments);
         assertEquals(1, arguments.size());
@@ -5397,7 +5397,7 @@ public ProgressCommand() {
         }
         
         @Override
-        public List<CodeAction> getCodeActions(ResultIterator resultIterator, CodeActionParams params) throws Exception {
+        public List<CodeAction> getCodeActions(NbCodeLanguageClient client, ResultIterator resultIterator, CodeActionParams params) throws Exception {
             return Collections.emptyList();
         }
         
@@ -5438,7 +5438,7 @@ public CompletableFuture<Object> processCommand(NbCodeLanguageClient client, Str
 
         @Override
         public Set<String> getCommands() {
-            return Collections.singleton("_progressCommand");
+            return Collections.singleton("test._progressCommand");
         }
 
 
@@ -5508,7 +5508,7 @@ public void showMessage(MessageParams params) {
         
         // now invoke the build
         ExecuteCommandParams ecp = new ExecuteCommandParams();
-        ecp.setCommand("_progressCommand");
+        ecp.setCommand("test._progressCommand");
         CompletableFuture<Object> buildF = server.getWorkspaceService().executeCommand(ecp);
         
         // the progress must be received at the client w/ the token, we need the token to issue cancel
diff --git a/java/java.lsp.server/vscode/package.json b/java/java.lsp.server/vscode/package.json
index 80841e6d6c44..d1bc194fc78e 100644
--- a/java/java.lsp.server/vscode/package.json
+++ b/java/java.lsp.server/vscode/package.json
@@ -87,7 +87,7 @@
 		"viewsWelcome": [
 			{
 				"view": "database.connections",
-				"contents": "No database connections found.\n[Add Database Connection](command:db.add.connection)\n[Add Oracle Autonomous DB](command:nbls:Tools:org.netbeans.modules.cloud.oracle.actions.AddADBAction)",
+				"contents": "No database connections found.\n[Add Database Connection](command:nbls.db.add.connection)\n[Add Oracle Autonomous DB](command:nbls:Tools:org.netbeans.modules.cloud.oracle.actions.AddADBAction)",
 				"when": "nb.database.view.active"
 			}
 		],
@@ -323,7 +323,7 @@
 							},
 							"processId": {
 								"type": "string",
-								"default": "${command:java.attachDebugger.pickProcess}",
+								"default": "${command:nbls.java.attachDebugger.pickProcess}",
 								"description": "Process Id of the debuggee"
 							},
 							"listen": {
@@ -400,7 +400,7 @@
 							},
 							"processId": {
 								"type": "string",
-								"default": "${command:nativeImage.attachDebugger.pickProcess}",
+								"default": "${command:nbls.nativeImage.attachDebugger.pickProcess}",
 								"description": "Process Id of the native image"
 							},
 							"miDebugger": {
@@ -437,7 +437,7 @@
 							"type": "nativeimage",
 							"request": "attach",
 							"name": "Attach to Native Image",
-							"processId": "^\"\\${command:nativeImage.attachDebugger.pickProcess\\}\"",
+							"processId": "^\"\\${command:nbls.nativeImage.attachDebugger.pickProcess\\}\"",
 							"nativeImagePath": ""
 						}
 					}
@@ -460,44 +460,44 @@
 				"category": "Java"
 			},
 			{
-				"command": "java.workspace.new",
+				"command": "nbls.workspace.new",
 				"title": "New from Template...",
 				"category": "Java",
 				"icon": "$(new-file)"
 			},
 			{
-				"command": "java.workspace.newproject",
+				"command": "nbls.workspace.newproject",
 				"title": "New Project...",
 				"category": "Java",
 				"icon": "$(new-folder)"
 			},
 			{
-				"command": "java.goto.super.implementation",
+				"command": "nbls.java.goto.super.implementation",
 				"title": "Go to Super Implementation",
 				"category": "Java"
 			},
 			{
-				"command": "java.open.type",
+				"command": "nbls.open.type",
 				"title": "Open Type...",
 				"category": "Java"
 			},
 			{
-				"command": "graalvm.pause.script",
+				"command": "nbls.graalvm.pause.script",
 				"title": "Pause in Script",
 				"category": "GraalVM"
 			},
 			{
-				"command": "foundProjects.deleteEntry",
+				"command": "nbls.foundProjects.deleteEntry",
 				"title": "Delete"
 			},
 			{
-				"command": "db.add.all.connection",
+				"command": "nbls.db.add.all.connection",
 				"title": "Add Database Connection",
 				"category": "Database",
 				"icon": "$(add)"
 			},
 			{
-				"command": "db.add.connection",
+				"command": "nbls.db.add.connection",
 				"title": "Add JDBC Database Connection"
 			},
 			{
@@ -537,57 +537,42 @@
 				"title": "Delete"
 			},
 			{
-				"command": "workbench.action.debug.run",
-				"title": "Run Without Debugging",
-				"icon": "$(run)"
-			},
-			{
-				"command": "workbench.action.debug.start",
-				"title": "Start Debugging",
-				"icon": "$(debug-alt)"
-			},
-			{
-				"command": "java.project.run",
+				"command": "nbls.project.run",
 				"category": "Project",
 				"title": "Run Project Without Debugging",
 				"icon": "$(run)"
 			},
 			{
-				"command": "java.project.debug",
+				"command": "nbls.project.debug",
 				"category": "Project",
 				"title": "Debug Project",
 				"icon": "$(debug-alt)"
 			},
 			{
-				"command": "java.project.test",
+				"command": "nbls.project.test",
 				"category": "Project",
 				"title": "Test Project",
 				"icon": "$(testing-run-all-icon)"
 			},
 			{
-				"command": "java.project.compile",
+				"command": "nbls.project.compile",
 				"category": "Project",
 				"title": "Compile Project"
 			},
 			{
-				"command": "java.project.clean",
+				"command": "nbls.project.clean",
 				"category": "Project",
 				"title": "Clean Project"
 			},
 			{
-				"command": "java.local.db.set.preferred.connection",
+				"command": "nbls.local.db.set.preferred.connection",
 				"title": "Set as Default Connection"
 			},
 			{
-				"command": "java.workspace.configureRunSettings",
+				"command": "nbls.workspace.configureRunSettings",
 				"title": "Edit",
 				"icon": "$(edit)"
 			},
-			{
-				"command": "testing.runAll",
-				"title": "Run All Tests",
-				"category": "Test"
-			},
 			{
 				"command": "nbls.addEventListener",
 				"title": "Add event listener"
@@ -609,9 +594,24 @@
 				"title": "Open Service Console"
 			},
 			{
-				"command": "java.select.editor.projects",
+				"command": "nbls.select.editor.projects",
 				"title": "Reveal active editor in Projects",
 				"category": "Project"
+			},
+			{
+				"command": "workbench.action.debug.run",
+				"title": "Run Without Debugging",
+				"icon": "$(run)"
+			},
+			{
+				"command": "workbench.action.debug.start",
+				"title": "Start Debugging",
+				"icon": "$(debug-alt)"
+			},
+			{
+				"command": "testing.runAll",
+				"title": "Run All Tests",
+				"category": "Test"
 			}
 		],
 		"keybindings": [
@@ -621,7 +621,7 @@
 				"when": "nbJavaLSReady && config.netbeans.javaSupport.enabled"
 			},
 			{
-				"command": "java.goto.super.implementation",
+				"command": "nbls.java.goto.super.implementation",
 				"key": "alt+U",
 				"mac": "alt+cmd+U",
 				"when": "editorHasCodeActionsProvider && editorTextFocus && config.netbeans.javaSupport.enabled"
@@ -636,25 +636,25 @@
 		"menus": {
 			"editor/context": [
 				{
-					"command": "java.goto.super.implementation",
+					"command": "nbls.java.goto.super.implementation",
 					"when": "nbJavaLSReady && editorLangId == java && editorTextFocus && config.netbeans.javaSupport.enabled",
 					"group": "navigation@100"
 				}
 			],
 			"explorer/context": [
 				{
-					"command": "java.workspace.new",
+					"command": "nbls.workspace.new",
 					"when": "nbJavaLSReady && explorerResourceIsFolder",
 					"group": "navigation@3"
 				}
 			],
 			"commandPalette": [
 				{
-					"command": "java.workspace.new",
+					"command": "nbls.workspace.new",
 					"when": "nbJavaLSReady"
 				},
 				{
-					"command": "java.workspace.newproject",
+					"command": "nbls.workspace.newproject",
 					"when": "config.netbeans.javaSupport.enabled"
 				},
 				{
@@ -662,15 +662,15 @@
 					"when": "nbJavaLSReady && config.netbeans.javaSupport.enabled"
 				},
 				{
-					"command": "java.goto.super.implementation",
+					"command": "nbls.java.goto.super.implementation",
 					"when": "nbJavaLSReady && editorLangId == java && config.netbeans.javaSupport.enabled"
 				},
 				{
-					"command": "graalvm.pause.script",
+					"command": "nbls.graalvm.pause.script",
 					"when": "nbJavaLSReady"
 				},
 				{
-					"command": "foundProjects.deleteEntry",
+					"command": "nbls.foundProjects.deleteEntry",
 					"when": "false"
 				},
 				{
@@ -710,7 +710,7 @@
 					"when": "false"
 				},
 				{
-					"command": "java.local.db.set.preferred.connection",
+					"command": "nbls.local.db.set.preferred.connection",
 					"when": "false"
 				},
 				{
@@ -726,11 +726,11 @@
 					"when": "false"
 				},
 				{
-					"command": "java.workspace.configureRunSettings",
+					"command": "nbls.workspace.configureRunSettings",
 					"when": "false"
 				},
 				{
-					"command": "db.add.all.connection",
+					"command": "nbls.db.add.all.connection",
 					"when": "false"
 				},
 				{
@@ -740,7 +740,7 @@
 			],
 			"view/title": [
 				{
-					"command": "java.workspace.newproject",
+					"command": "nbls.workspace.newproject",
 					"when": "nbJavaLSReady && view == foundProjects && config.netbeans.javaSupport.enabled",
 					"group": "navigation"
 				},
@@ -765,14 +765,14 @@
 					"when": "nbJavaLSReady && view == foundProjects && config.netbeans.javaSupport.enabled"
 				},
 				{
-					"command": "db.add.all.connection",
+					"command": "nbls.db.add.all.connection",
 					"when": "view == database.connections",
 					"group": "navigation@3"
 				}
 			],
 			"view/item/context": [
 				{
-					"command": "foundProjects.deleteEntry",
+					"command": "nbls.foundProjects.deleteEntry",
 					"when": "view == foundProjects && viewItem == node && config.netbeans.javaSupport.enabled"
 				},
 				{
@@ -801,37 +801,37 @@
 					"group": "db@50"
 				},
 				{
-					"command": "java.workspace.new",
+					"command": "nbls.workspace.new",
 					"when": "view == foundProjects && viewItem =~ /is:folder/",
 					"group": "inline@1"
 				},
 				{
-					"command": "java.project.run",
+					"command": "nbls.project.run",
 					"when": "view == foundProjects && viewItem =~ /is:project/ && viewItem =~ /^(?!.*is:projectRoot)/ && config.netbeans.javaSupport.enabled",
 					"group": "inline@10"
 				},
 				{
-					"command": "java.project.debug",
+					"command": "nbls.project.debug",
 					"when": "view == foundProjects && viewItem =~ /is:project/ && viewItem =~ /^(?!.*is:projectRoot)/ && config.netbeans.javaSupport.enabled",
 					"group": "inline@11"
 				},
 				{
-					"command": "java.project.test",
+					"command": "nbls.project.test",
 					"when": "view == foundProjects && viewItem =~ /is:project/ && viewItem =~ /^(?!.*is:projectRoot)/ && config.netbeans.javaSupport.enabled",
 					"group": "F@30"
 				},
 				{
-					"command": "java.project.compile",
+					"command": "nbls.project.compile",
 					"when": "view == foundProjects && viewItem =~ /is:project/ && config.netbeans.javaSupport.enabled",
 					"group": "F@10"
 				},
 				{
-					"command": "java.project.clean",
+					"command": "nbls.project.clean",
 					"when": "view == foundProjects && viewItem =~ /is:project/ && config.netbeans.javaSupport.enabled",
 					"group": "F@20"
 				},
 				{
-					"command": "java.local.db.set.preferred.connection",
+					"command": "nbls.local.db.set.preferred.connection",
 					"when": "viewItem =~ /class:org.netbeans.api.db.explorer.DatabaseConnection/",
 					"group": "db@40"
 				},
@@ -868,7 +868,7 @@
 					"group": "inline@13"
 				},
 				{
-					"command": "java.workspace.configureRunSettings",
+					"command": "nbls.workspace.configureRunSettings",
 					"when": "view == run-config && viewItem == configureRunSettings",
 					"group": "inline@1"
 				}
diff --git a/java/java.lsp.server/vscode/src/dbConfigurationProvider.ts b/java/java.lsp.server/vscode/src/dbConfigurationProvider.ts
index 74fcca86c076..91a4e6ce0221 100644
--- a/java/java.lsp.server/vscode/src/dbConfigurationProvider.ts
+++ b/java/java.lsp.server/vscode/src/dbConfigurationProvider.ts
@@ -44,7 +44,7 @@ class DBConfigurationProvider implements vscode.DebugConfigurationProvider {
 
 	resolveDebugConfigurationWithSubstitutedVariables?(_folder: vscode.WorkspaceFolder | undefined, config: vscode.DebugConfiguration, _token?: vscode.CancellationToken): vscode.ProviderResult<vscode.DebugConfiguration> {
         return new Promise<vscode.DebugConfiguration>(async resolve => {
-			let o: Object = await vscode.commands.executeCommand('java.db.connection');
+			let o: Object = await vscode.commands.executeCommand('nbls.db.connection');
 			if (config === undefined) {
 				config = {} as vscode.DebugConfiguration;
 			}
@@ -70,4 +70,4 @@ export function onDidTerminateSession(session: vscode.DebugSession): any {
     }
 }
 
-export const dBConfigurationProvider = new DBConfigurationProvider();
\ No newline at end of file
+export const dBConfigurationProvider = new DBConfigurationProvider();
diff --git a/java/java.lsp.server/vscode/src/extension.ts b/java/java.lsp.server/vscode/src/extension.ts
index 4733e20e1dbf..29a6ac1ed5fa 100644
--- a/java/java.lsp.server/vscode/src/extension.ts
+++ b/java/java.lsp.server/vscode/src/extension.ts
@@ -63,6 +63,7 @@ import { env } from 'process';
 import { PropertiesView } from './propertiesView/propertiesView';
 
 const API_VERSION : string = "1.0";
+export const COMMAND_PREFIX : string = "nbls";
 const DATABASE: string = 'Database';
 const listeners = new Map<string, string[]>();
 let client: Promise<NbLanguageClient>;
@@ -263,7 +264,7 @@ function wrapProjectActionWithProgress(action : string, configuration : string |
             items.push(item);
         }
     }
-    return wrapCommandWithProgress('java.project.run.action', title, log, showOutput, actionParams, ...items);
+    return wrapCommandWithProgress(COMMAND_PREFIX + '.project.run.action', title, log, showOutput, actionParams, ...items);
 }
 
 function wrapCommandWithProgress(lsCommand : string, title : string, log? : vscode.OutputChannel, showOutput? : boolean, ...args : any[]) : Thenable<unknown> {
@@ -433,7 +434,7 @@ export function activate(context: ExtensionContext): VSNetBeansAPI {
 			context.subscriptions.push(vscode.debug.registerDebugConfigurationProvider('java+', runConfigurationProvider));
 			context.subscriptions.push(vscode.debug.registerDebugConfigurationProvider('java', runConfigurationProvider));
 			context.subscriptions.push(vscode.window.registerTreeDataProvider('run-config', runConfigurationNodeProvider));
-			context.subscriptions.push(vscode.commands.registerCommand('java.workspace.configureRunSettings', (...params: any[]) => {
+			context.subscriptions.push(vscode.commands.registerCommand(COMMAND_PREFIX + '.workspace.configureRunSettings', (...params: any[]) => {
 				configureRunSettings(context, params);
 			}));
 			vscode.commands.executeCommand('setContext', 'runConfigurationInitialized', true);
@@ -441,12 +442,12 @@ export function activate(context: ExtensionContext): VSNetBeansAPI {
 	});
 
     // register commands
-    context.subscriptions.push(commands.registerCommand('java.workspace.new', async (ctx) => {
+    context.subscriptions.push(commands.registerCommand(COMMAND_PREFIX + '.workspace.new', async (ctx) => {
         let c : LanguageClient = await client;
         const commands = await vscode.commands.getCommands();
-        if (commands.includes('java.new.from.template')) {
+        if (commands.includes(COMMAND_PREFIX + '.new.from.template')) {
             // first give the context, then the open-file hint in the case the context is not specific enough
-            const res = await vscode.commands.executeCommand('java.new.from.template', contextUri(ctx)?.toString(), vscode.window.activeTextEditor?.document?.uri?.toString());
+            const res = await vscode.commands.executeCommand(COMMAND_PREFIX + '.new.from.template', contextUri(ctx)?.toString(), vscode.window.activeTextEditor?.document?.uri?.toString());
 
             if (typeof res === 'string') {
                 let newFile = vscode.Uri.parse(res as string);
@@ -463,11 +464,11 @@ export function activate(context: ExtensionContext): VSNetBeansAPI {
             throw `Client ${c} doesn't support new from template`;
         }
     }));
-    context.subscriptions.push(commands.registerCommand('java.workspace.newproject', async (ctx) => {
+    context.subscriptions.push(commands.registerCommand(COMMAND_PREFIX + '.workspace.newproject', async (ctx) => {
         let c : LanguageClient = await client;
         const commands = await vscode.commands.getCommands();
-        if (commands.includes('java.new.project')) {
-            const res = await vscode.commands.executeCommand('java.new.project', contextUri(ctx)?.toString());
+        if (commands.includes(COMMAND_PREFIX + '.new.project')) {
+            const res = await vscode.commands.executeCommand(COMMAND_PREFIX + '.new.project', contextUri(ctx)?.toString());
             if (typeof res === 'string') {
                 let newProject = vscode.Uri.parse(res as string);
 
@@ -485,35 +486,35 @@ export function activate(context: ExtensionContext): VSNetBeansAPI {
             throw `Client ${c} doesn't support new project`;
         }
     }));
-    context.subscriptions.push(commands.registerCommand('nbls.workspace.compile', () =>
-        wrapCommandWithProgress('nbls.build.workspace', 'Compiling workspace...', log, true)
+    context.subscriptions.push(commands.registerCommand(COMMAND_PREFIX + '.workspace.compile', () =>
+        wrapCommandWithProgress(COMMAND_PREFIX + '.build.workspace', 'Compiling workspace...', log, true)
     ));
-    context.subscriptions.push(commands.registerCommand('nbls.workspace.clean', () =>
-        wrapCommandWithProgress('nbls.clean.workspace', 'Cleaning workspace...', log, true)
+    context.subscriptions.push(commands.registerCommand(COMMAND_PREFIX + '.workspace.clean', () =>
+        wrapCommandWithProgress(COMMAND_PREFIX + '.clean.workspace', 'Cleaning workspace...', log, true)
     ));
-    context.subscriptions.push(commands.registerCommand('java.project.compile', (args) => {
+    context.subscriptions.push(commands.registerCommand(COMMAND_PREFIX + '.project.compile', (args) => {
         wrapProjectActionWithProgress('build', undefined, 'Compiling...', log, true, args);
     }));
-    context.subscriptions.push(commands.registerCommand('java.project.clean', (args) => {
+    context.subscriptions.push(commands.registerCommand(COMMAND_PREFIX + '.project.clean', (args) => {
         wrapProjectActionWithProgress('clean', undefined, 'Cleaning...', log, true, args);
     }));
-    context.subscriptions.push(commands.registerCommand('java.open.type', () => {
-        wrapCommandWithProgress('java.quick.open', 'Opening type...', log, true).then(() => {
+    context.subscriptions.push(commands.registerCommand(COMMAND_PREFIX + '.open.type', () => {
+        wrapCommandWithProgress(COMMAND_PREFIX + '.quick.open', 'Opening type...', log, true).then(() => {
             commands.executeCommand('workbench.action.focusActiveEditorGroup');
         });
     }));
-    context.subscriptions.push(commands.registerCommand('java.goto.super.implementation', async () => {
+    context.subscriptions.push(commands.registerCommand(COMMAND_PREFIX + '.java.goto.super.implementation', async () => {
         if (window.activeTextEditor?.document.languageId !== "java") {
             return;
         }
         const uri = window.activeTextEditor.document.uri;
         const position = window.activeTextEditor.selection.active;
-        const locations: any[] = await vscode.commands.executeCommand('java.super.implementation', uri.toString(), position) || [];
+        const locations: any[] = await vscode.commands.executeCommand(COMMAND_PREFIX + '.java.super.implementation', uri.toString(), position) || [];
         return vscode.commands.executeCommand('editor.action.goToLocations', window.activeTextEditor.document.uri, position,
             locations.map(location => new vscode.Location(vscode.Uri.parse(location.uri), new vscode.Range(location.range.start.line, location.range.start.character, location.range.end.line, location.range.end.character))),
             'peek', 'No super implementation found');
     }));
-    context.subscriptions.push(commands.registerCommand('java.rename.element.at', async (offset) => {
+    context.subscriptions.push(commands.registerCommand(COMMAND_PREFIX + '.rename.element.at', async (offset) => {
         const editor = window.activeTextEditor;
         if (editor) {
             await commands.executeCommand('editor.action.rename', [
@@ -522,7 +523,7 @@ export function activate(context: ExtensionContext): VSNetBeansAPI {
             ]);
         }
     }));
-    context.subscriptions.push(commands.registerCommand('java.surround.with', async (items) => {
+    context.subscriptions.push(commands.registerCommand(COMMAND_PREFIX + '.surround.with', async (items) => {
         const selected: any = await window.showQuickPick(items, { placeHolder: 'Surround with ...' });
         if (selected) {
             if (selected.userData.edit && selected.userData.edit.changes) {
@@ -539,12 +540,12 @@ export function activate(context: ExtensionContext): VSNetBeansAPI {
             await commands.executeCommand(selected.userData.command.command, ...(selected.userData.command.arguments || []));
         }
     }));
-    context.subscriptions.push(commands.registerCommand('db.add.all.connection', async () => {
+    context.subscriptions.push(commands.registerCommand('nbls.db.add.all.connection', async () => {
         const ADD_JDBC = 'Add Database Connection';
         const ADD_ADB = 'Add Oracle Autonomous DB';
         const selected: any = await window.showQuickPick([ADD_JDBC, ADD_ADB], { placeHolder: 'Select type...' });
         if (selected == ADD_JDBC) {
-            await commands.executeCommand('db.add.connection');
+            await commands.executeCommand('nbls.db.add.connection');
         } else if (selected == ADD_ADB) {
             await commands.executeCommand('nbls:Tools:org.netbeans.modules.cloud.oracle.actions.AddADBAction');
         }
@@ -602,32 +603,32 @@ export function activate(context: ExtensionContext): VSNetBeansAPI {
             }) : ret;
         }
     };
-    context.subscriptions.push(commands.registerCommand('java.run.test', async (uri, methodName?, launchConfiguration?) => {
+    context.subscriptions.push(commands.registerCommand(COMMAND_PREFIX + '.run.test', async (uri, methodName?, launchConfiguration?) => {
         await runDebug(true, true, uri, methodName, launchConfiguration);
     }));
-    context.subscriptions.push(commands.registerCommand('java.debug.test', async (uri, methodName?, launchConfiguration?) => {
+    context.subscriptions.push(commands.registerCommand(COMMAND_PREFIX + '.debug.test', async (uri, methodName?, launchConfiguration?) => {
         await runDebug(false, true, uri, methodName, launchConfiguration);
     }));
-    context.subscriptions.push(commands.registerCommand('java.run.single', async (uri, methodName?, launchConfiguration?) => {
+    context.subscriptions.push(commands.registerCommand(COMMAND_PREFIX + '.run.single', async (uri, methodName?, launchConfiguration?) => {
         await runDebug(true, false, uri, methodName, launchConfiguration);
     }));
-    context.subscriptions.push(commands.registerCommand('java.debug.single', async (uri, methodName?, launchConfiguration?) => {
+    context.subscriptions.push(commands.registerCommand(COMMAND_PREFIX + '.debug.single', async (uri, methodName?, launchConfiguration?) => {
         await runDebug(false, false, uri, methodName, launchConfiguration);
     }));
-    context.subscriptions.push(commands.registerCommand('java.project.run', async (node, launchConfiguration?) => {
+    context.subscriptions.push(commands.registerCommand(COMMAND_PREFIX + '.project.run', async (node, launchConfiguration?) => {
         return runDebug(true, false, contextUri(node)?.toString() || '',  undefined, launchConfiguration, true);
     }));
-    context.subscriptions.push(commands.registerCommand('java.project.debug', async (node, launchConfiguration?) => {
+    context.subscriptions.push(commands.registerCommand(COMMAND_PREFIX + '.project.debug', async (node, launchConfiguration?) => {
         return runDebug(false, false, contextUri(node)?.toString() || '',  undefined, launchConfiguration, true);
     }));
-    context.subscriptions.push(commands.registerCommand('java.project.test', async (node, launchConfiguration?) => {
+    context.subscriptions.push(commands.registerCommand(COMMAND_PREFIX + '.project.test', async (node, launchConfiguration?) => {
         return runDebug(true, true, contextUri(node)?.toString() || '',  undefined, launchConfiguration, true);
     }));
-    context.subscriptions.push(commands.registerCommand('java.package.test', async (uri, launchConfiguration?) => {
+    context.subscriptions.push(commands.registerCommand(COMMAND_PREFIX + '.package.test', async (uri, launchConfiguration?) => {
         await runDebug(true, true, uri, undefined, launchConfiguration);
     }));
-    context.subscriptions.push(commands.registerCommand('java.open.stacktrace', async (uri, methodName, fileName, line) => {
-        const location: string | undefined = uri ? await commands.executeCommand('java.resolve.stacktrace.location', uri, methodName, fileName) : undefined;
+    context.subscriptions.push(commands.registerCommand(COMMAND_PREFIX + '.open.stacktrace', async (uri, methodName, fileName, line) => {
+        const location: string | undefined = uri ? await commands.executeCommand(COMMAND_PREFIX + '.resolve.stacktrace.location', uri, methodName, fileName) : undefined;
         if (location) {
             const lNum = line - 1;
             window.showTextDocument(vscode.Uri.parse(location), { selection: new vscode.Range(new vscode.Position(lNum, 0), new vscode.Position(lNum, 0)) });
@@ -642,14 +643,14 @@ export function activate(context: ExtensionContext): VSNetBeansAPI {
         const c = await client;
         return (await c.sendRequest<SymbolInformation[]>("workspace/symbol", { "query": query })) ?? [];
     }));
-    context.subscriptions.push(commands.registerCommand('java.complete.abstract.methods', async () => {
+    context.subscriptions.push(commands.registerCommand(COMMAND_PREFIX + '.java.complete.abstract.methods', async () => {
         const active = vscode.window.activeTextEditor;
         if (active) {
             const position = new vscode.Position(active.selection.start.line, active.selection.start.character);
-            await commands.executeCommand('java.implement.all.abstract.methods', active.document.uri.toString(), position);
+            await commands.executeCommand(COMMAND_PREFIX + '.java.implement.all.abstract.methods', active.document.uri.toString(), position);
         }
     }));
-    context.subscriptions.push(commands.registerCommand('nbls.startup.condition', async () => {
+    context.subscriptions.push(commands.registerCommand(COMMAND_PREFIX + '.startup.condition', async () => {
         return client;
     }));
     context.subscriptions.push(commands.registerCommand('nbls.addEventListener', (eventName, listener) => {
@@ -1143,7 +1144,7 @@ function doActivateWithJDK(specifiedJDK: string | null, context: ExtensionContex
 
         constructor(provider : CustomizableTreeDataProvider<Visualizer>, client : NbLanguageClient) {
             this.provider = provider;
-            this.setCommand = vscode.commands.registerCommand('java.local.db.set.preferred.connection', (n) => this.setPreferred(n));
+            this.setCommand = vscode.commands.registerCommand(COMMAND_PREFIX + '.local.db.set.preferred.connection', (n) => this.setPreferred(n));
         }
 
         decorateChildren(element: Visualizer, children: Visualizer[]): Visualizer[] {
@@ -1157,7 +1158,7 @@ function doActivateWithJDK(specifiedJDK: string | null, context: ExtensionContex
             if (!(item.contextValue && item.contextValue.match(/class:org.netbeans.api.db.explorer.DatabaseConnection/))) {
                 return item;
             }
-            return vscode.commands.executeCommand('java.db.preferred.connection').then((id) => {
+            return vscode.commands.executeCommand(COMMAND_PREFIX + '.db.preferred.connection').then((id) => {
                 if (id == vis.id) {
                     item.description = '(default)';
                 }
@@ -1167,7 +1168,7 @@ function doActivateWithJDK(specifiedJDK: string | null, context: ExtensionContex
 
         setPreferred(...args : any[]) {
             const id : number = args[0]?.id || -1;
-            vscode.commands.executeCommand('nbls:Database:netbeans.db.explorer.action.makepreferred', ...args);
+            vscode.commands.executeCommand(COMMAND_PREFIX + ':Database:netbeans.db.explorer.action.makepreferred', ...args);
             // refresh all
             this.provider.fireItemChange();
         }
@@ -1213,7 +1214,7 @@ function doActivateWithJDK(specifiedJDK: string | null, context: ExtensionContex
                 revealActiveEditor(ed);
             }
         }));
-        ctx.subscriptions.push(vscode.commands.registerCommand("java.select.editor.projects", () => revealActiveEditor()));
+        ctx.subscriptions.push(vscode.commands.registerCommand(COMMAND_PREFIX + ".select.editor.projects", () => revealActiveEditor()));
 
         // attempt to reveal NOW:
         if (netbeansConfig.get("revealActiveInProjects")) {
@@ -1253,7 +1254,7 @@ function doActivateWithJDK(specifiedJDK: string | null, context: ExtensionContex
                         view.dispose();
                         break;
                     case 'command':
-                        vscode.commands.executeCommand('nb.htmlui.process.command', message.data);
+                        vscode.commands.executeCommand(COMMAND_PREFIX + '.htmlui.process.command', message.data);
                         break;
                 }
             });
@@ -1427,7 +1428,7 @@ class NetBeansConfigurationInitialProvider implements vscode.DebugConfigurationP
             u = vscode.window.activeTextEditor?.document?.uri
         }
         let result : vscode.DebugConfiguration[] = [];
-        const configNames : string[] | null | undefined = await vscode.commands.executeCommand('java.project.configurations', u?.toString());
+        const configNames : string[] | null | undefined = await vscode.commands.executeCommand(COMMAND_PREFIX + '.project.configurations', u?.toString());
         if (configNames) {
             let first : boolean = true;
             for (let cn of configNames) {
@@ -1472,7 +1473,7 @@ class NetBeansConfigurationDynamicProvider implements vscode.DebugConfigurationP
             return [];
         }
         let result : vscode.DebugConfiguration[] = [];
-        const attachConnectors : DebugConnector[] | null | undefined = await vscode.commands.executeCommand('java.attachDebugger.configurations');
+        const attachConnectors : DebugConnector[] | null | undefined = await vscode.commands.executeCommand(COMMAND_PREFIX + '.java.attachDebugger.configurations');
         if (attachConnectors) {
             for (let ac of attachConnectors) {
                 const debugConfig : vscode.DebugConfiguration = {
@@ -1484,7 +1485,7 @@ class NetBeansConfigurationDynamicProvider implements vscode.DebugConfigurationP
                     let defaultValue: string = ac.defaultValues[i];
                     if (!defaultValue.startsWith("${command:")) {
                         // Create a command that asks for the argument value:
-                        let cmd: string = "java.attachDebugger.connector." + ac.id + "." + ac.arguments[i];
+                        let cmd: string = COMMAND_PREFIX + ".java.attachDebugger.connector." + ac.id + "." + ac.arguments[i];
                         debugConfig[ac.arguments[i]] = "${command:" + cmd + "}";
                         if (!commandValues.has(cmd)) {
                             commandValues.set(cmd, ac.defaultValues[i]);
diff --git a/java/java.lsp.server/vscode/src/launchConfigurations.ts b/java/java.lsp.server/vscode/src/launchConfigurations.ts
index f5f13ee9c705..ef53dc4fbf89 100644
--- a/java/java.lsp.server/vscode/src/launchConfigurations.ts
+++ b/java/java.lsp.server/vscode/src/launchConfigurations.ts
@@ -22,6 +22,7 @@ import { commands, CompletionItem, CompletionList, ExtensionContext, languages,
 import { InsertTextFormat } from 'vscode-languageclient';
 import * as jsoncp from 'jsonc-parser';
 import * as fs from 'fs';
+import { COMMAND_PREFIX } from "./extension";
 
 export function updateLaunchConfig() {
     workspace.findFiles('.vscode/launch.json').then(async files => {
@@ -83,7 +84,7 @@ export function registerCompletion(context: ExtensionContext) {
                         let completionItems: ProviderResult<CompletionList<CompletionItem>> | CompletionItem[];
                         if (path.length == 1) {
                             // Get all configurations:
-                            completionItems = commands.executeCommand('java.project.configuration.completion', uri);
+                            completionItems = commands.executeCommand(COMMAND_PREFIX + '.project.configuration.completion', uri);
                         } else {
                             let node: jsoncp.Node = currentNode;
                             if (currentNode.type == 'property' && currentNode.parent) {
@@ -94,11 +95,11 @@ export function registerCompletion(context: ExtensionContext) {
                                 node = currentNode.parent;
                                 let attributesMap = getAttributes(node);
                                 // Get possible values of property 'propName':
-                                completionItems = commands.executeCommand('java.project.configuration.completion', uri, attributesMap, propName);
+                                completionItems = commands.executeCommand(COMMAND_PREFIX + '.project.configuration.completion', uri, attributesMap, propName);
                             } else {
                                 let attributesMap = getAttributes(node);
                                 // Get additional possible attributes:
-                                completionItems = commands.executeCommand('java.project.configuration.completion', uri, attributesMap);
+                                completionItems = commands.executeCommand(COMMAND_PREFIX + '.project.configuration.completion', uri, attributesMap);
                             }
                         }
                         return (completionItems as Thenable<CompletionList<CompletionItem>>).then(itemsList => {
diff --git a/java/java.lsp.server/vscode/src/test/suite/extension.test.ts b/java/java.lsp.server/vscode/src/test/suite/extension.test.ts
index 01aec1c16e64..d398e2d2dd41 100644
--- a/java/java.lsp.server/vscode/src/test/suite/extension.test.ts
+++ b/java/java.lsp.server/vscode/src/test/suite/extension.test.ts
@@ -94,7 +94,7 @@ suite('Extension Test Suite', () => {
 
         try {
             console.log("Test: invoking compile");
-            let res = await vscode.commands.executeCommand("nbls.workspace.compile");
+            let res = await vscode.commands.executeCommand(myExtension.COMMAND_PREFIX + ".workspace.compile");
             console.log(`Test: compile finished with ${res}`);
         } catch (error) {
             dumpJava();
@@ -184,7 +184,7 @@ suite('Extension Test Suite', () => {
 
         try {
             console.log("Test: get project java source roots");
-            let res: any = await vscode.commands.executeCommand("java.get.project.source.roots", Uri.file(folder).toString());
+            let res: any = await vscode.commands.executeCommand(myExtension.COMMAND_PREFIX + ".java.get.project.source.roots", Uri.file(folder).toString());
             console.log(`Test: get project java source roots finished with ${res}`);
             assert.ok(res, "No java source root returned");
             assert.strictEqual(res.length, 2, `Invalid number of java roots returned`);
@@ -192,21 +192,21 @@ suite('Extension Test Suite', () => {
             assert.strictEqual(res[1], path.join('file:', folder, 'src', 'test', 'java') + path.sep, `Invalid java test source root returned`);
 
             console.log("Test: get project resource roots");
-            res = await vscode.commands.executeCommand("java.get.project.source.roots", Uri.file(folder).toString(), 'resources');
+            res = await vscode.commands.executeCommand(myExtension.COMMAND_PREFIX + ".java.get.project.source.roots", Uri.file(folder).toString(), 'resources');
             console.log(`Test: get project resource roots finished with ${res}`);
             assert.ok(res, "No resource root returned");
             assert.strictEqual(res.length, 1, `Invalid number of resource roots returned`);
             assert.strictEqual(res[0], path.join('file:', folder, 'src', 'main', 'resources') + path.sep, `Invalid resource root returned`);
 
             console.log("Test: get project compile classpath");
-            res = await vscode.commands.executeCommand("java.get.project.classpath", Uri.file(folder).toString());
+            res = await vscode.commands.executeCommand(myExtension.COMMAND_PREFIX + ".java.get.project.classpath", Uri.file(folder).toString());
             console.log(`Test: get project compile classpath finished with ${res}`);
             assert.ok(res, "No compile classpath returned");
             assert.strictEqual(res.length, 9, `Invalid number of compile classpath roots returned`);
             assert.ok(res.find((item: any) => item === path.join('file:', folder, 'target', 'classes') + path.sep, `Invalid compile classpath root returned`));
 
             console.log("Test: get project source classpath");
-            res = await vscode.commands.executeCommand("java.get.project.classpath", Uri.file(folder).toString(), 'SOURCE');
+            res = await vscode.commands.executeCommand(myExtension.COMMAND_PREFIX + ".java.get.project.classpath", Uri.file(folder).toString(), 'SOURCE');
             console.log(`Test: get project source classpath finished with ${res}`);
             assert.ok(res, "No source classpath returned");
             assert.strictEqual(res.length, 3, `Invalid number of source classpath roots returned`);
@@ -215,25 +215,25 @@ suite('Extension Test Suite', () => {
             assert.ok(res.find((item: any) => item === path.join('file:', folder, 'src', 'test', 'java') + path.sep, `Invalid source classpath root returned`));
 
             console.log("Test: get project boot classpath");
-            res = await vscode.commands.executeCommand("java.get.project.classpath", Uri.file(folder).toString(), 'BOOT');
+            res = await vscode.commands.executeCommand(myExtension.COMMAND_PREFIX + ".java.get.project.classpath", Uri.file(folder).toString(), 'BOOT');
             console.log(`Test: get project boot classpath finished with ${res}`);
             assert.ok(res, "No boot classpath returned");
             assert.ok(res.length > 0, `Invalid number of boot classpath roots returned`);
 
             console.log("Test: get project boot source classpath");
-            res = await vscode.commands.executeCommand("java.get.project.classpath", Uri.file(folder).toString(), 'BOOT', true);
+            res = await vscode.commands.executeCommand(myExtension.COMMAND_PREFIX + ".java.get.project.classpath", Uri.file(folder).toString(), 'BOOT', true);
             console.log(`Test: get project boot source classpath finished with ${res}`);
             assert.ok(res, "No boot source classpath returned");
             assert.ok(res.length > 0, `Invalid number of boot source classpath roots returned`);
 
             console.log("Test: get all project packages");
-            res = await vscode.commands.executeCommand("java.get.project.packages", Uri.file(folder).toString());
+            res = await vscode.commands.executeCommand(myExtension.COMMAND_PREFIX + ".java.get.project.packages", Uri.file(folder).toString());
             console.log(`Test: get all project packages finished with ${res}`);
             assert.ok(res, "No packages returned");
             assert.ok(res.length > 0, `Invalid number of packages returned`);
 
             console.log("Test: get project source packages");
-            res = await vscode.commands.executeCommand("java.get.project.packages", Uri.file(folder).toString(), true);
+            res = await vscode.commands.executeCommand(myExtension.COMMAND_PREFIX + ".java.get.project.packages", Uri.file(folder).toString(), true);
             console.log(`Test: get project source packages finished with ${res}`);
             assert.ok(res, "No packages returned");
             assert.strictEqual(res.length, 1, `Invalid number of packages returned`);
@@ -253,7 +253,7 @@ suite('Extension Test Suite', () => {
         vscode.workspace.saveAll();
         try {
             console.log("Test: load workspace tests");
-            let tests: any = await vscode.commands.executeCommand("java.load.workspace.tests", Uri.file(folder).toString());
+            let tests: any = await vscode.commands.executeCommand(myExtension.COMMAND_PREFIX + ".load.workspace.tests", Uri.file(folder).toString());
             console.log(`Test: load workspace tests finished with ${tests}`);
             assert.ok(tests, "No tests returned for workspace");
             assert.strictEqual(tests.length, 2, `Invalid number of test suites returned`);
@@ -266,7 +266,7 @@ suite('Extension Test Suite', () => {
 
             console.log("Test: run all workspace tests");
             const workspaceFolder = (vscode.workspace.workspaceFolders!)[0];
-            await vscode.commands.executeCommand('java.run.test', workspaceFolder.uri.toString());
+            await vscode.commands.executeCommand(myExtension.COMMAND_PREFIX + '.run.test', workspaceFolder.uri.toString());
             console.log(`Test: run all workspace tests finished`);
         } catch (error) {
             dumpJava();
diff --git a/java/java.lsp.server/vscode/src/test/suite/testutils.ts b/java/java.lsp.server/vscode/src/test/suite/testutils.ts
index dfc015e52984..5abc8776254b 100644
--- a/java/java.lsp.server/vscode/src/test/suite/testutils.ts
+++ b/java/java.lsp.server/vscode/src/test/suite/testutils.ts
@@ -125,7 +125,7 @@ export function waitCommandsReady() : Promise<void> {
         function checkCommands(attempts : number, cb : () => void) {
             try {
                 // this command is parameterless
-                vscode.commands.executeCommand("java.attachDebugger.configurations")
+                vscode.commands.executeCommand(myExtension.COMMAND_PREFIX + ".java.attachDebugger.configurations")
                 console.log("NBLS commands ready.");
                 resolve();
             } catch (e) {
@@ -159,9 +159,9 @@ async function waitProjectRecognized(someJavaFile : string) {
     return waitCommandsReady().then(() => {
         const u : vscode.Uri = vscode.Uri.file(someJavaFile);
         // clear out possible bad or negative caches.
-        return vscode.commands.executeCommand("java.clear.project.caches").then(
+        return vscode.commands.executeCommand(myExtension.COMMAND_PREFIX + ".clear.project.caches").then(
             // this should assure opening the root with the created project.
-            () => vscode.commands.executeCommand("java.get.project.packages", u.toString())
+            () => vscode.commands.executeCommand(myExtension.COMMAND_PREFIX + ".java.get.project.packages", u.toString())
         );
     });
 }
diff --git a/java/java.lsp.server/vscode/src/testAdapter.ts b/java/java.lsp.server/vscode/src/testAdapter.ts
index 2141996ccc41..fb5563e94021 100644
--- a/java/java.lsp.server/vscode/src/testAdapter.ts
+++ b/java/java.lsp.server/vscode/src/testAdapter.ts
@@ -21,6 +21,7 @@
 import { commands, debug, tests, workspace, CancellationToken, TestController, TestItem, TestRunProfileKind, TestRunRequest, Uri, TestRun, TestMessage, Location, Position, MarkdownString } from "vscode";
 import * as path from 'path';
 import { asRange, TestCase, TestSuite } from "./protocol";
+import { COMMAND_PREFIX } from "./extension";
 
 export class NbTestAdapter {
 
@@ -41,7 +42,7 @@ export class NbTestAdapter {
 
     async load(): Promise<void> {
         for (let workspaceFolder of workspace.workspaceFolders || []) {
-            const loadedTests: any = await commands.executeCommand('java.load.workspace.tests', workspaceFolder.uri.toString());
+            const loadedTests: any = await commands.executeCommand(COMMAND_PREFIX + '.load.workspace.tests', workspaceFolder.uri.toString());
             if (loadedTests) {
                 loadedTests.forEach((suite: TestSuite) => {
                     this.updateTests(suite);
@@ -64,7 +65,7 @@ export class NbTestAdapter {
                         this.set(item, 'enqueued');
                         const idx = item.id.indexOf(':');
                         if (!cancellation.isCancellationRequested) {
-                            await commands.executeCommand(request.profile?.kind === TestRunProfileKind.Debug ? 'java.debug.single' : 'java.run.single', item.uri.toString(), idx < 0 ? undefined : item.id.slice(idx + 1));
+                            await commands.executeCommand(request.profile?.kind === TestRunProfileKind.Debug ? COMMAND_PREFIX + '.debug.single' : COMMAND_PREFIX + '.run.single', item.uri.toString(), idx < 0 ? undefined : item.id.slice(idx + 1));
                         }
                     }
                 }
@@ -72,7 +73,7 @@ export class NbTestAdapter {
                 this.testController.items.forEach(item => this.set(item, 'enqueued'));
                 for (let workspaceFolder of workspace.workspaceFolders || []) {
                     if (!cancellation.isCancellationRequested) {
-                        await commands.executeCommand(request.profile?.kind === TestRunProfileKind.Debug ? 'java.debug.test': 'java.run.test', workspaceFolder.uri.toString());
+                        await commands.executeCommand(request.profile?.kind === TestRunProfileKind.Debug ? COMMAND_PREFIX + '.debug.test': COMMAND_PREFIX + '.run.test', workspaceFolder.uri.toString());
                     }
                 }
             }
@@ -308,7 +309,7 @@ export class NbTestAdapter {
             }
             const result = regExp.exec(line);
             if (result) {
-                message.appendText(result[1]).appendText('(').appendMarkdown(`[${result[3]}](command:java.open.stacktrace?${encodeURIComponent(JSON.stringify([currentTestUri, result[2], result[4], +result[5]]))})`).appendText(')');
+                message.appendText(result[1]).appendText('(').appendMarkdown(`[${result[3]}](command:${COMMAND_PREFIX}.open.stacktrace?${encodeURIComponent(JSON.stringify([currentTestUri, result[2], result[4], +result[5]]))})`).appendText(')');
             } else {
                 message.appendText(line);
             }
diff --git a/java/java.openjdk.project/src/org/netbeans/modules/java/openjdk/jtreg/CodeLensProviderImpl.java b/java/java.openjdk.project/src/org/netbeans/modules/java/openjdk/jtreg/CodeLensProviderImpl.java
index 4d9db1f37512..0c6b3507c1bc 100644
--- a/java/java.openjdk.project/src/org/netbeans/modules/java/openjdk/jtreg/CodeLensProviderImpl.java
+++ b/java/java.openjdk.project/src/org/netbeans/modules/java/openjdk/jtreg/CodeLensProviderImpl.java
@@ -65,8 +65,8 @@ private List<? extends CodeLens> doComputeCodeLens(Document doc) {
         Tag testTag = testTags.get(0);
         Range lenSpan = new Range(testTag.getTagStart(), testTag.getTagEnd());
         List<Object> params = Collections.singletonList(file.toURI().toString());
-        return Collections.unmodifiableList(Arrays.asList(new CodeLens(lenSpan, new Command(Bundle.DN_RunTest(), "java.run.test", params), null),
-                                                          new CodeLens(lenSpan, new Command(Bundle.DN_DebugTest(), "java.debug.test", params), null)));
+        return Collections.unmodifiableList(Arrays.asList(new CodeLens(lenSpan, new Command(Bundle.DN_RunTest(), "nbls.run.test", params), null),
+                                                          new CodeLens(lenSpan, new Command(Bundle.DN_DebugTest(), "nbls.debug.test", params), null)));
     }
 
 }
