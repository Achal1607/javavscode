diff --git a/nbbuild/antsrc/org/netbeans/nbbuild/extlibs/SetupLimitModules.java b/nbbuild/antsrc/org/netbeans/nbbuild/extlibs/SetupLimitModules.java
new file mode 100644
index 000000000000..db43c9f7f436
--- /dev/null
+++ b/nbbuild/antsrc/org/netbeans/nbbuild/extlibs/SetupLimitModules.java
@@ -0,0 +1,117 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.netbeans.nbbuild.extlibs;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.lang.ProcessBuilder.Redirect;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Properties;
+import org.apache.tools.ant.BuildException;
+import org.apache.tools.ant.Task;
+
+/**
+ *
+ */
+public class SetupLimitModules extends Task {
+
+    private String limitModulesProperty;
+    private String releaseVersion;
+    private String excludedModules;
+    private String nbjdkHome;
+    private File cacheFile;
+
+    public void setLimitModulesProperty(String limitModulesProperty) {
+        this.limitModulesProperty = limitModulesProperty;
+    }
+
+    public void setReleaseVersion(String releaseVersion) {
+        this.releaseVersion = releaseVersion;
+    }
+
+    public void setExcludedModules(String excludedModules) {
+        this.excludedModules = excludedModules;
+    }
+
+    public void setNbjdkHome(String nbjdkHome) {
+        this.nbjdkHome = nbjdkHome;
+    }
+
+    public void setCacheFile(File cacheFile) {
+        this.cacheFile = cacheFile;
+    }
+
+    @Override
+    public void execute() throws BuildException {
+        try {
+            Properties cache = new Properties();
+
+            if (cacheFile != null && cacheFile.canRead()) {
+                try (InputStream in = new FileInputStream(cacheFile)) {
+                    cache.load(in);
+                }
+            }
+
+            String cacheKey = nbjdkHome + "-" + releaseVersion;
+            String limitedModules = cache.getProperty(cacheKey);
+
+            if (limitedModules == null) {
+                String antlibJar = SetupLimitModules.class
+                                                    .getProtectionDomain()
+                                                    .getCodeSource()
+                                                    .getLocation()
+                                                    .getPath();
+                List<String> command = new ArrayList<>();
+                command.add(new File(new File(nbjdkHome, "bin"), "java").getAbsolutePath());
+                command.add("-classpath");
+                command.add(antlibJar);
+                command.add("org.netbeans.nbbuild.extlibs.SetupLimitModulesProbe");
+                command.add(releaseVersion);
+                command.addAll(Arrays.asList(excludedModules.split(",")));
+                Process p = new ProcessBuilder(command).redirectError(Redirect.INHERIT).start();
+                p.waitFor();
+                StringBuilder limitModulesText = new StringBuilder();
+                InputStream in = p.getInputStream();
+                int r;
+                while ((r = in.read()) != (-1)) {
+                    limitModulesText.append((char) r);
+                }
+                limitedModules = limitModulesText.toString().trim();
+                if (cacheFile != null) {
+                    cache.put(cacheKey, limitedModules);
+
+                    try (OutputStream out = new FileOutputStream(cacheFile)) {
+                        cache.store(out, "");
+                    }
+                }
+            }
+
+            getProject().setNewProperty(limitModulesProperty, limitedModules);
+        } catch (IOException | InterruptedException ex) {
+            throw new BuildException(ex);
+        }
+    }
+
+}
diff --git a/nbbuild/antsrc/org/netbeans/nbbuild/extlibs/SetupLimitModulesProbe.java b/nbbuild/antsrc/org/netbeans/nbbuild/extlibs/SetupLimitModulesProbe.java
new file mode 100644
index 000000000000..1470a49c1743
--- /dev/null
+++ b/nbbuild/antsrc/org/netbeans/nbbuild/extlibs/SetupLimitModulesProbe.java
@@ -0,0 +1,126 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.netbeans.nbbuild.extlibs;
+
+import com.sun.source.util.JavacTask;
+import java.io.IOException;
+import java.net.URI;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Set;
+import java.util.stream.Collectors;
+import javax.lang.model.element.ModuleElement;
+import javax.lang.model.element.ModuleElement.RequiresDirective;
+import javax.lang.model.util.ElementFilter;
+import javax.tools.SimpleJavaFileObject;
+import javax.tools.ToolProvider;
+
+/**
+ * Please note this class is copied during build into apisupport/apisupport.ant.
+ * When modifying this class, please ensure the module still compiles and works.
+ */
+public class SetupLimitModulesProbe {
+
+    public static void main(String[] args) throws IOException {
+        String release = args[0];
+
+        String[] excludedModules =
+            Arrays.stream(args)
+                  .skip(1)
+                  .toArray(s -> new String[s]);
+
+        String limitModules = computeLimitModules(release, excludedModules);
+
+        System.out.println(limitModules);
+    }
+
+    public static String computeLimitModules(String release, String... excludedModulesIn) throws IOException {
+        Set<String> excludedModules = new HashSet<>(List.of(excludedModulesIn));
+        List<String> options;
+
+        if ("last".equals(release)) {
+            options = List.of("--add-modules", "ALL-SYSTEM", "-classpath", "");
+        } else {
+            options = List.of("--release", release, "-classpath", "");
+        }
+
+        JavacTask task = (JavacTask)
+                ToolProvider.getSystemJavaCompiler()
+                            .getTask(null, null, null, options, null,
+                                     List.of(new JFOImpl(URI.create("mem://Test.java"), "")));
+
+        task.analyze();
+
+        String limitModules =
+            task.getElements()
+                .getAllModuleElements()
+                .stream()
+                .filter(m -> !m.getQualifiedName().toString().startsWith("jdk.internal."))
+                .filter(m -> !m.isUnnamed())
+                .filter(m -> canInclude(m, excludedModules))
+                .map(m -> m.getQualifiedName())
+                .collect(Collectors.joining(","));
+
+        return limitModules;
+    }
+
+    private static boolean canInclude(ModuleElement m, Set<String> excludes) {
+        return Collections.disjoint(transitiveDependencies(m), excludes);
+    }
+
+    private static Set<String> transitiveDependencies(ModuleElement m) {
+        List<ModuleElement> todo = new LinkedList<>();
+        Set<ModuleElement> seenModules = new HashSet<>();
+
+        todo.add(m);
+
+        while (!todo.isEmpty()) {
+            ModuleElement current = todo.remove(0);
+
+            if (seenModules.add(current)) {
+                for (RequiresDirective rd : ElementFilter.requiresIn(current.getDirectives())) {
+                    todo.add(rd.getDependency());
+                }
+            }
+        }
+
+        return seenModules.stream()
+                          .map(c -> c.getQualifiedName().toString())
+                          .collect(Collectors.toSet());
+    }
+
+    private static final class JFOImpl extends SimpleJavaFileObject {
+
+        private final String content;
+
+        public JFOImpl(URI uri, String content) {
+            super(uri, Kind.SOURCE);
+            this.content = content;
+        }
+
+        @Override
+        public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {
+            return content;
+        }
+
+    }
+}
diff --git a/nbbuild/jdk.xml b/nbbuild/jdk.xml
index c47694ecaedd..3109e3f032b4 100644
--- a/nbbuild/jdk.xml
+++ b/nbbuild/jdk.xml
@@ -257,13 +257,8 @@
             <os family="windows"/> <!-- #72467 -->
         </condition>
         <property name=".exe" value=""/>
-        <property name="test.nbjdk.home" location="" />
-        <condition property="test.nbjdk.java" value="${test.nbjdk.home}/bin/java${.exe}" else="${nbjdk.home}/bin/java${.exe}">
-            <and>
-                <isset property="test.nbjdk.home" />
-                <available file="${test.nbjdk.home}/bin/java${.exe}" type="file"/>
-            </and>
-        </condition>
+        <property name="test.nbjdk.home" location="${nbjdk.home}" />
+        <property name="test.nbjdk.java" location="${test.nbjdk.home}/bin/java${.exe}"/>
         <available property="have-jdk-1.9" file="${nbjdk.home}/bin/jmod${.exe}"/>
         <condition property="test-have-jdk-1.9">
             <or>
diff --git a/nbbuild/templates/common.xml b/nbbuild/templates/common.xml
index d3b2f613d866..073a2c1ca109 100644
--- a/nbbuild/templates/common.xml
+++ b/nbbuild/templates/common.xml
@@ -139,9 +139,22 @@
                 <compilerarg value="-Xbootclasspath/p:${bootclasspath.prepend}" />
             </custom-javac>
         </presetdef>
+        <property name="custom.javac.set" value="true" />
     </target>
 
-    <target name="-javac-init-no-bootclasspath-prepend" depends="build-init" unless="bootclasspath.prepend">
+    <target name="-javac-init-limit-modules" depends="build-init" if="limit.modules.option.list">
+        <presetdef name="nb-javac">
+            <custom-javac>
+                <bootclasspath>
+                    <path path="${nbjdk.bootclasspath}"/>
+                </bootclasspath>
+                <compilerarg value="--limit-modules=${limit.modules.option.list}" />
+            </custom-javac>
+        </presetdef>
+        <property name="custom.javac.set" value="true" />
+    </target>
+
+    <target name="-javac-init-no-bootclasspath-prepend" depends="build-init,-javac-init-bootclasspath-prepend,-javac-init-limit-modules" unless="custom.javac.set">
         <presetdef name="nb-javac">
             <custom-javac>
                 <bootclasspath>
diff --git a/nbbuild/templates/projectized.xml b/nbbuild/templates/projectized.xml
index 10e2b7677739..33d9671b12f0 100644
--- a/nbbuild/templates/projectized.xml
+++ b/nbbuild/templates/projectized.xml
@@ -95,9 +95,43 @@
             </path>
         </pathconvert>
     </target>
-    <target name="-init-bootclasspath-prepend-compile" depends="-init-compile-bootclasspath-nb">
+
+    <target name="-check-source-over-8" depends="basic-init">
+        <condition property="limitmodules.release" value="${javac.target}" else="${javac.release}">
+            <equals arg1="${javac.release}" arg2=""/>
+        </condition>
+        <condition property="javac.source.is.8" value="true">
+            <or>
+                <equals arg1="${limitmodules.release}" arg2="1.6" />
+                <equals arg1="${limitmodules.release}" arg2="1.7" />
+                <equals arg1="${limitmodules.release}" arg2="1.8" />
+            </or>
+        </condition>
+    </target>
+
+    <target name="-init-compile-limit-modules-nb" depends="basic-init,jdk-8-check,set-buildnumber,-define-custom-javac-task,-check-source-over-8" unless="javac.source.is.8">
+        <taskdef name="setuplimitmodules" classname="org.netbeans.nbbuild.extlibs.SetupLimitModules" classpath="${nbantext.jar}"/>
+        <setuplimitmodules limitModulesProperty="nb.javac.limit.modules.nb"
+                           releaseVersion="${limitmodules.release}"
+                           excludedModules="java.compiler,jdk.compiler"
+                           nbjdkHome="${nbjdk.home}"
+                           cacheFile="${nb_all}/nbbuild/build/limit-modules-cache.properties" />
+    </target>
+
+    <target name="-init-bootclasspath-prepend-compile" depends="-init-compile-bootclasspath-nb,-init-compile-limit-modules-nb,-check-source-over-8">
         <condition property="bootclasspath.prepend" value="${bootclasspath.prepend.nb}">
-            <istrue value="${requires.nb.javac}"/>
+            <and>
+                <istrue value="${requires.nb.javac}"/>
+                <istrue value="${javac.source.is.8}"/>
+            </and>
+        </condition>
+        <condition property="limit.modules.option.list" value="${nb.javac.limit.modules.nb}">
+            <and>
+                <istrue value="${requires.nb.javac}"/>
+                <not>
+                    <istrue value="${javac.source.is.8}"/>
+                </not>
+            </and>
         </condition>
     </target>
     <target name="-init-bootclasspath-prepend-run" depends="-init-bootclasspath-prepend-compile,-init-bootclasspath-prepend-run8,-init-bootclasspath-prepend-run9"/>
@@ -123,7 +157,13 @@
         </condition>
     </target>
     <target name="-init-bootclasspath-prepend-run9" depends="-init-bootclasspath-prepend-compile" if="have-jdk-1.9">
-        <condition property="test.bootclasspath.prepend.args" value="--limit-modules=java.base,java.logging,java.xml,java.prefs,java.desktop,java.management,java.instrument,jdk.zipfs,java.scripting,java.naming,jdk.jdi,jdk.unsupported,java.sql">
+        <taskdef name="setuplimitmodules" classname="org.netbeans.nbbuild.extlibs.SetupLimitModules" classpath="${nbantext.jar}"/>
+        <setuplimitmodules limitModulesProperty="run.nb.javac.limit.modules.nb"
+                           releaseVersion="last"
+                           excludedModules="java.compiler,jdk.compiler"
+                           nbjdkHome="${test.nbjdk.home}"
+                           cacheFile="${nb_all}/nbbuild/build/limit-modules-cache.properties" />
+        <condition property="test.bootclasspath.prepend.args" value="--limit-modules=${run.nb.javac.limit.modules.nb}">
             <and>
                 <istrue value="${requires.nb.javac}"/>
                 <not>
diff --git a/java/java.hints/nbproject/project.properties b/java/java.hints/nbproject/project.properties
index 5d2a4f82802e..d47624c2d8ad 100644
--- a/java/java.hints/nbproject/project.properties
+++ b/java/java.hints/nbproject/project.properties
@@ -17,7 +17,7 @@
 
 spec.version.base=1.107.0
 
-javac.source=1.8
+javac.release=17
 
 nbroot=../..
 jbrowse.external=${nbroot}/retouche
diff --git a/java/java.hints/src/org/netbeans/modules/java/hints/bugs/Unused.java b/java/java.hints/src/org/netbeans/modules/java/hints/bugs/Unused.java
index e681ed7b97ea..182d05231fb2 100644
--- a/java/java.hints/src/org/netbeans/modules/java/hints/bugs/Unused.java
+++ b/java/java.hints/src/org/netbeans/modules/java/hints/bugs/Unused.java
@@ -19,7 +19,6 @@
 package org.netbeans.modules.java.hints.bugs;
 
 import com.sun.source.tree.Tree.Kind;
-import java.util.ArrayList;
 import java.util.List;
 import javax.lang.model.element.ElementKind;
 import org.netbeans.modules.java.editor.base.semantic.UnusedDetector;
@@ -34,6 +33,8 @@
 import org.netbeans.spi.java.hints.TriggerTreeKind;
 import org.openide.util.NbBundle.Messages;
 
+import static org.netbeans.api.java.source.CompilationInfo.CacheClearPolicy.ON_TASK_END;
+
 /**
  *
  * @author lahvac
@@ -52,24 +53,46 @@ public class Unused {
     @BooleanOption(displayName="#LBL_UnusedPackagePrivate", tooltip="#TP_UnusedPackagePrivate", defaultValue=DETECT_UNUSED_PACKAGE_PRIVATE_DEFAULT)
     public static final String DETECT_UNUSED_PACKAGE_PRIVATE = "detect.unused.package.private";
 
-    @TriggerTreeKind(Kind.COMPILATION_UNIT)
+    @TriggerTreeKind({
+        //class-like kinds:
+        Kind.ANNOTATION_TYPE, Kind.CLASS, Kind.ENUM, Kind.INTERFACE, Kind.RECORD,
+        Kind.VARIABLE,
+        Kind.METHOD
+    })
     public static List<ErrorDescription> unused(HintContext ctx) {
         List<UnusedDescription> unused = UnusedDetector.findUnused(ctx.getInfo(), () -> ctx.isCanceled());
-        List<ErrorDescription> result = new ArrayList<>(unused.size());
-        boolean detectUnusedPackagePrivate = ctx.getPreferences().getBoolean(DETECT_UNUSED_PACKAGE_PRIVATE, DETECT_UNUSED_PACKAGE_PRIVATE_DEFAULT);
+        if (unused.isEmpty()) {
+            return null;
+        }
+        boolean detectUnusedPackagePrivate = getTaskCachedBoolean(ctx, DETECT_UNUSED_PACKAGE_PRIVATE, DETECT_UNUSED_PACKAGE_PRIVATE_DEFAULT);
         for (UnusedDescription ud : unused) {
             if (ctx.isCanceled()) {
                 break;
             }
+            if (ud.unusedElementPath.getLeaf() != ctx.getPath().getLeaf()) {
+                continue;
+            }
             if (!detectUnusedPackagePrivate && ud.packagePrivate) {
                 continue;
             }
             ErrorDescription err = convertUnused(ctx, ud);
             if (err != null) {
-                result.add(err);
+                return List.of(err);
             }
+            break;
+        }
+        return null;
+    }
+
+    // reading from AuxiliaryConfigBasedPreferences in inner loops is not cheap since it needs a mutex
+    private static boolean getTaskCachedBoolean(HintContext ctx, String key, boolean defaultVal) {
+        Object cached = ctx.getInfo().getCachedValue(key);
+        if (cached instanceof Boolean val) {
+            return val;
         }
-        return result;
+        boolean fromPrefs = ctx.getPreferences().getBoolean(key, defaultVal);
+        ctx.getInfo().putCachedValue(key, fromPrefs, ON_TASK_END);
+        return fromPrefs;
     }
 
     @Messages({

